/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.employee.action;
import java.sql.Connection;

import java.sql.Statement;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.admin.data.DBMasterTable;
import com.dtac.admin.data.DBMemberType;
import com.dtac.employee.data.DBCalendar;
import com.dtac.employee.data.DBFingPrnt;
import com.dtac.employee.data.DBPeriod;
import com.dtac.employee.data.DBWorkTime;
import com.dtac.employee.form.CalendarForm;
import com.dtac.employee.form.FingPrntForm;
import com.dtac.employee.form.PeriodForm;
import com.dtac.utils.DBConnect;
import com.dtac.utils.DateUtil;
/** 
 * MyEclipse Struts
 * Creation date: 20-08-2012
 */
public class ReadFingPrntAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		 Map map = new HashMap();
	     map.put("timeattendform.button.readdata", 	"readdata");
	     map.put("timeattendform.button.search", 	"search");
	     return map;
	}

	public ActionForward readdata(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) 
	throws Exception {	//10-09-2012
		String loginId 		= "";
		String appCode  	= "hr41";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			
			FingPrntForm fingPrntForm = (FingPrntForm) form;
			String checkDate	= fingPrntForm.getCheckDate();
			String empID		= fingPrntForm.getEmpID(); 
			String offiCode		= fingPrntForm.getOffiCode();
			String userID		= "";			
			String tDate		= checkDate;
			String tEmpID		= empID;
			String tmpDate		= "";
			String alertMessage = "";	
			
			DateUtil dateUtil = new DateUtil();
			DBPeriod dbPeriod = new DBPeriod();
			DBCalendar dbCalendar = new DBCalendar();
			
			if (checkDate.trim().length() != 10) alertMessage = "ตรวจสอบวันที่";
			else if (!dateUtil.isValidDateStr(dateUtil.CnvToYYYYMMDD(checkDate, '-'))) alertMessage = "ตรวจสอบวันที่";
			else if (!dbCalendar.CheckCalendar(checkDate, "0") || !dbCalendar.CheckCalendar(checkDate, "1"))
				alertMessage = "กำหนดปฏิทิน เมนู 3.2 ";
			
			if (!alertMessage.equals("")) {
				request.setAttribute("alertMessage", alertMessage);
				return  mapping.findForward("success");
			}
			
			tmpDate	  = dateUtil.CnvToYYYYMMDD(checkDate, '-');
			if ((dbPeriod.GetPeriod("1", dateUtil.CnvToDDMMYYYYThaiYear(tmpDate)).size() != 1) ||
				(dbPeriod.GetPeriod("0", dateUtil.CnvToDDMMYYYYThaiYear(tmpDate)).size() != 1)) {
				alertMessage = "กำหนดงวดการคิดเงิน เมนู 3.1";				
			}			
			
			if (!alertMessage.equals("")) {
				request.setAttribute("alertMessage", alertMessage);
				return  mapping.findForward("success");
			}
			
			
			int noEmp = 0;
			
			DBFingPrnt dbFingPrnt = new DBFingPrnt();
			List fpList = null;
			if (offiCode.equals("BR")) {
				fpList = dbFingPrnt.GetFingPrntBRList(empID, checkDate);
				
			} else if (offiCode.equals("TP")) {
				fpList = dbFingPrnt.GetFingPrntTPList(empID, checkDate);
			}
			if (fpList.size() > 0 && !offiCode.equals("")) { 
				DBConnect agent = new DBConnect();
				Connection conn = agent.getConnectMYSql();
				Statement pStmt = null;
				String sqlStmt 	= "", tmpUserID = "", startDate = "", stopDate = "";
				int noRec = 0;
				for (int x=0; x<fpList.size(); x++) {
					FingPrntForm fpData = (FingPrntForm) fpList.get(x);
					
					if (fpData.getEmpID() == null) {
						empID = ""; tmpUserID = ""; noRec = 0;
						
					} else {					
						empID	= fpData.getEmpID();
						userID	= fpData.getUserID();	
						checkDate=fpData.getCheckDate();
										
						if (noRec == 0) { tmpUserID = empID; startDate = checkDate; stopDate= checkDate; }
						if (tmpUserID.equals(empID)) {
							//if (noRec == 1) { startDate = checkDate;  } 
							noRec++;
							stopDate= checkDate;
						} else {
							sqlStmt = "REPLACE INTO hrmtimefp (empid, userid, officode, workdate, starttime, stoptime) VALUE " +
							"('"+tmpUserID.trim()+"',"+userID+", '"+offiCode+"', '"+tmpDate+"', '"+startDate+"', '"+stopDate+"') ";
												
							pStmt = conn.createStatement();
							pStmt.executeUpdate(sqlStmt);
							
							tmpUserID = empID; startDate = checkDate; stopDate= checkDate; noRec = 1; noEmp++;							
						}
					}
				}
				if (!tmpUserID.equals("")) {
					sqlStmt = "REPLACE INTO hrmtimefp (empid, userid, officode, workdate, starttime, stoptime) VALUE " +
					"('"+tmpUserID.trim()+"',"+userID+", '"+offiCode+"', '"+tmpDate+"', '"+startDate+"', '"+stopDate+"') ";
					noEmp++;	
					pStmt = conn.createStatement();
					pStmt.executeUpdate(sqlStmt);
				}
				if (pStmt != null) pStmt.close();
				if (conn != null)  conn.close();
			
				request.setAttribute("alertMessage", "read data "+tDate+ " = "+fpList.size()+" records., ("+ String.valueOf(noEmp) +" employees)");
							
				dbFingPrnt.UpdateSalType(tEmpID, tmpDate);
				dbFingPrnt.CalAmountOT(tEmpID, tmpDate);
				
				String dayNo 		= "";
				String dayTypeCode 	= "";
				String year	= "", month = "", periodNo = "";
				//========= Dairy ========================
				List calendarList = dbCalendar.GetCalendar(dateUtil.CnvToDDMMYYYYThaiYear(tmpDate), "0"); //Dairy
				if (calendarList.size() == 1) {
					CalendarForm calendarInfo = (CalendarForm) calendarList.get(0);
					dayNo 		= calendarInfo.getDayNo();
					dayTypeCode = calendarInfo.getDayTypeCode();
					
					List periodList = dbPeriod.GetPeriod("0", dateUtil.CnvToDDMMYYYYThaiYear(tmpDate));
					if (periodList.size() == 1) {
						PeriodForm periodInfo = (PeriodForm) periodList.get(0);
						year	= periodInfo.getYear();
						month	= periodInfo.getMonth();
						periodNo= periodInfo.getPeriodNo();				
							
					}
					//dbFingPrnt.CalOTDairy(tEmpID, tmpDate, dayNo, dayTypeCode);	
					//27-05-2012
					//dbFingPrnt.CopyToPayTrans(tEmpID, tmpDate, "0", loginId, year, month, periodNo);
					dbFingPrnt.CopyToWorkTime(tEmpID, tmpDate, "0");
				}
				// ========= Monthly =======================
				calendarList = dbCalendar.GetCalendar(dateUtil.CnvToDDMMYYYYThaiYear(tmpDate), "1"); 
				if (calendarList.size() == 1) {
					CalendarForm calendarInfo = (CalendarForm) calendarList.get(0);
					dayNo 		= calendarInfo.getDayNo();
					dayTypeCode = calendarInfo.getDayTypeCode();
					
					List periodList = dbPeriod.GetPeriod("1", dateUtil.CnvToDDMMYYYYThaiYear(tmpDate));
					if (periodList.size() == 1) {
						PeriodForm periodInfo = (PeriodForm) periodList.get(0);
						year	= periodInfo.getYear();
						month	= periodInfo.getMonth();
						periodNo= periodInfo.getPeriodNo();				
							
					}
					//dbFingPrnt.CalOTMonthly(tEmpID, tmpDate, dayNo, dayTypeCode);	
					//27-05-2012
					//dbFingPrnt.CopyToPayTrans(tEmpID, tmpDate, "1", loginId, year, month, periodNo);
					dbFingPrnt.CopyToWorkTime(tEmpID, tmpDate, "1");
				}
				List fingPrntList = dbFingPrnt.GetFingPrntList(tmpDate, tEmpID, "", "", offiCode);
				if (fingPrntList.size() > 0) request.setAttribute("fingPrntList", fingPrntList);
				
				//DBPayTrans dbPayTrans = new DBPayTrans();
				//dbPayTrans.AddAutoPayTrans(tmpDate);
				
				DBWorkTime dbWorkTime = new DBWorkTime();
				dbWorkTime.AddAutoWorkTime(tmpDate, offiCode);
				
			} else request.setAttribute("alertMessage", "no data");
			
			DBMemberType dbMemberType = new DBMemberType();
			List memberTypeList = dbMemberType.GetMemberTypeList("", "", "");
			if (memberTypeList.size() > 0) request.setAttribute("memberTypeList", memberTypeList);
			
			DBMasterTable dbMasterTable = new DBMasterTable();
			List deptList = dbMasterTable.GetMasterTableDTList("dept", "", "", "AC");
			if (deptList.size() > 0) request.setAttribute("deptList", deptList);
			
			List offiList = dbMasterTable.GetMasterTableDTList("offi", "", "", "AC");
			if (offiList.size() > 0) request.setAttribute("offiList", offiList);
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward("success");
	}	
	public ActionForward search(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) 
	throws Exception {	//02-09-2012
		String loginId 		= "";
		String appCode  	= "hr41";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			
			FingPrntForm fingPrntForm = (FingPrntForm) form;
			String checkDate	= fingPrntForm.getCheckDate();
			String empID		= fingPrntForm.getEmpID();
			String empTypeCode	= fingPrntForm.getEmpTypeCode();			
			String empDeptCode	= fingPrntForm.getEmpDeptCode();
			String offiCode		= fingPrntForm.getOffiCode();
			String alertMessage = "";	
			
			DateUtil dateUtil = new DateUtil();
			if (checkDate.trim().length() != 10) alertMessage = "check read data date";
			else if (!dateUtil.isValidDateStr(dateUtil.CnvToYYYYMMDD(checkDate, '-'))) alertMessage = "check read data date";

			if (!alertMessage.equals("")) {
				request.setAttribute("alertMessage", alertMessage);
				return  mapping.findForward("success");
			}
			String tmpDate		= dateUtil.CnvToYYYYMMDD(checkDate, '-');
			
			DBMemberType dbMemberType = new DBMemberType();
			List memberTypeList = dbMemberType.GetMemberTypeList("", "", "");
			if (memberTypeList.size() > 0) request.setAttribute("memberTypeList", memberTypeList);
			
			DBMasterTable dbMasterTable = new DBMasterTable();
			List deptList = dbMasterTable.GetMasterTableDTList("dept", "", "", "AC");
			if (deptList.size() > 0) request.setAttribute("deptList", deptList);
			
			List offiList = dbMasterTable.GetMasterTableDTList("offi", "", "", "AC");
			if (offiList.size() > 0) request.setAttribute("offiList", offiList);
			
			DBFingPrnt dbFingPrnt = new DBFingPrnt();
			List fingPrntList = dbFingPrnt.GetFingPrntList(tmpDate, empID, empTypeCode, empDeptCode, offiCode);
			if (fingPrntList.size() > 0) request.setAttribute("fingPrntList", fingPrntList);
				
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward("success");
	}	
}