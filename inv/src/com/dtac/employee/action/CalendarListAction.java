/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.employee.action;
import java.util.HashMap;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBDay;
import com.dtac.admin.data.DBLogin;
import com.dtac.admin.data.DBMonth;
import com.dtac.admin.data.DBYear;
import com.dtac.employee.data.DBCalendar;
import com.dtac.employee.data.DBPeriod;
import com.dtac.employee.form.CalendarForm;
import com.dtac.employee.form.PeriodForm;
import com.dtac.utils.DateUtil;
/** 
 * MyEclipse Struts
 * Creation date: 14-08-2012
 */
public class CalendarListAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();
	    map.put("calendarform.button.update", 	"update");
	    map.put("calendarform.button.search", 	"search");
	    map.put("calendarform.button.sendtime", "sendtime");
	    return map;
	}
	
	public ActionForward sendtime(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) 
	throws Exception {	//28-03-2010
		String forwardText 	= "sendtime";
		String loginId		= "";
		String appCode 		= "hr32";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"mant")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			CalendarForm calendarForm = (CalendarForm) form;
			String workDate		= calendarForm.getWorkDate();
			String salTypeCode 	= calendarForm.getSalTypeCode();
			String alertMessage = "";
			
			DBCalendar dbCalendar = new DBCalendar();
			List calendarList;
			if (workDate.equals("")) alertMessage = "select item";
				
			else {
				calendarList = dbCalendar.GetCalendar(workDate, salTypeCode);
				if (calendarList.size() == 1) {
					CalendarForm calendarInfo = (CalendarForm) calendarList.get(0);
					calendarForm.setWeekNo(calendarInfo.getWeekNo());
					calendarForm.setDayNo(calendarInfo.getDayNo());
					calendarForm.setSalTypeName(calendarInfo.getSalTypeName());
					calendarForm.setDayTypeCode(calendarInfo.getDayTypeCode());
					calendarForm.setDayTypeName(calendarInfo.getDayTypeName());
					//calendarForm.setSendTimeStatus(calendarInfo.getSendTimeStatus());
					//calendarForm.setSendTimeDate(calendarInfo.getSendTimeDate());		
					//if (calendarInfo.getSendTimeStatus().equals("CL")) alertMessage = "send time sheet complete.";
															
				} else {					
					alertMessage = "select item";
				}
			}
			if (alertMessage.equals("")) {
				DBPeriod dbPeriod = new DBPeriod();
				List periodList = dbPeriod.GetPeriod(salTypeCode, workDate);
				if (periodList.size() == 1) {
					PeriodForm periodInfo = (PeriodForm) periodList.get(0);
					calendarForm.setYear(periodInfo.getYear());
					calendarForm.setMonth(periodInfo.getMonth());
					calendarForm.setPeriodNo(periodInfo.getPeriodNo());
					if (periodInfo.getStatus().equals("CL")) alertMessage = "this period is closed.";
					
				} else {
					alertMessage = "check period in menu 1.3";
				}
			}
			if (!alertMessage.equals("")) {
				forwardText = "success";
				request.setAttribute("alertMessage", alertMessage);
				
				//String year		= calendarForm.getYear();
				String engYear	= calendarForm.getEngYear();
				String month	= calendarForm.getMonth();

				DBYear dbYear 	= new DBYear();
				List yearList	= dbYear.GetYearList("", "");
				if (yearList.size() > 0) request.setAttribute("yearList", yearList);
				
				DBMonth dbMonth = new DBMonth();
				List monthList = dbMonth.GetMonthList();
				if (monthList.size() > 0) request.setAttribute("monthList", monthList);
				
				DateUtil dateUtil = new DateUtil();
				int maxDayInMonth = dateUtil.maxDayForMonth(engYear, month);
				String days = String.valueOf(maxDayInMonth);
				
				calendarList = dbCalendar.GetCalendarList(engYear, month, days, salTypeCode);
				if (calendarList.size() > 0) request.setAttribute("calendarList", calendarList);
				
			} else {
				DBDay dbDay = new DBDay();
				List dayList = dbDay.GetDayList();
				if (dayList.size() > 0) request.setAttribute("dayList", dayList);

				//calendarForm.setActvSendTime("N");
			}
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward update(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) 
	throws Exception {	//28-03-2010
		String forwardText 	= "update";
		String loginId		= "";
		String appCode 		= "hr32";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"mant")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			CalendarForm calendarForm = (CalendarForm) form;
			String workDate		= calendarForm.getWorkDate();
			String salTypeCode 	= calendarForm.getSalTypeCode();
			
			DBCalendar dbCalendar = new DBCalendar();
			List calendarList;
			if (workDate.equals("")) {
				forwardText = "success";
				
			} else {
				calendarList = dbCalendar.GetCalendar(workDate, salTypeCode);
				if (calendarList.size() == 1) {
					CalendarForm calendarInfo = (CalendarForm) calendarList.get(0);
					calendarForm.setWeekNo(calendarInfo.getWeekNo());
					calendarForm.setDayNo(calendarInfo.getDayNo());
					calendarForm.setSalTypeName(calendarInfo.getSalTypeName());
					calendarForm.setDayTypeCode(calendarInfo.getDayTypeCode());
					calendarForm.setDayTypeName(calendarInfo.getDayTypeName());
					calendarForm.setDayRemark(calendarInfo.getDayRemark());
					calendarForm.setTimeStart(calendarInfo.getTimeStart());
					calendarForm.setTimeLate(calendarInfo.getTimeLate());
					calendarForm.setTimeStop(calendarInfo.getTimeStop());
					
					DBDay dbDay = new DBDay();
					List dayList = dbDay.GetDayList();
					if (dayList.size() > 0) request.setAttribute("dayList", dayList);
					
				} else {
					forwardText = "success";
					
				}
			}			
			if (forwardText.equals("success")) {
				//String year		= calendarForm.getYear();
				String engYear	= calendarForm.getEngYear();
				String month	= calendarForm.getMonth();

				DBYear dbYear 	= new DBYear();
				List yearList	= dbYear.GetYearList("", "");
				if (yearList.size() > 0) request.setAttribute("yearList", yearList);
				
				DBMonth dbMonth = new DBMonth();
				List monthList = dbMonth.GetMonthList();
				if (monthList.size() > 0) request.setAttribute("monthList", monthList);
				

				DateUtil dateUtil = new DateUtil();
				int maxDayInMonth = dateUtil.maxDayForMonth(engYear, month);
				String days = String.valueOf(maxDayInMonth);
				
				calendarList = dbCalendar.GetCalendarList(engYear, month, days, salTypeCode);
				if (calendarList.size() > 0) request.setAttribute("calendarList", calendarList);

				request.setAttribute("alertMessage", "select item");
			} 
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward search(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) 
	throws Exception {	//12-10-2011
		String loginId	= "";
		String appCode 	= "hr32";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			
			CalendarForm calendarForm = (CalendarForm) form;
			String salTypeCode 	= calendarForm.getSalTypeCode();
			String year		= calendarForm.getYear();
			String month	= calendarForm.getMonth();
			String days		= "";
			String workDate	= "";
			String engYear	= String.valueOf(Integer.parseInt(year)-543);
			
			DBYear dbYear 	= new DBYear();
			List yearList	= dbYear.GetYearList("", "");
			if (yearList.size() > 0) request.setAttribute("yearList", yearList);
			
			DBMonth dbMonth = new DBMonth();
			List monthList = dbMonth.GetMonthList();
			if (monthList.size() > 0) request.setAttribute("monthList", monthList);
						
			DateUtil dateUtil = new DateUtil();
			int maxDayInMonth = dateUtil.maxDayForMonth(engYear, month);

			DBCalendar dbCalendar = new DBCalendar();
			if (!dbMonth.CheckMonthChk(year, month)) {				
				dbMonth.AddMonthChk(year, month);
				
				for (int i=1; i<=maxDayInMonth; i++) {
					days = String.valueOf(i);
					if (days.trim().length() == 1) days = "0"+days.trim();
					
					workDate = days+"/"+month+"/"+engYear;
					int dayNo = dateUtil.dayOfWeek(engYear, month, days);
					dbCalendar.AddCalendar(workDate, dayNo);
				}
			}

			days = String.valueOf(maxDayInMonth);
			
			List calendarList = dbCalendar.GetCalendarList(engYear, month, days, salTypeCode);
			if (calendarList.size() > 0) request.setAttribute("calendarList", calendarList);
			
			session.setAttribute("salTypeCode", salTypeCode);
			session.setAttribute("engYear", engYear);
			session.setAttribute("month", month);
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward("success");
	}
}