/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.employee.action;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.admin.data.DBMasterTable;
import com.dtac.admin.data.DBMemberType;
import com.dtac.employee.data.DBEmployee;
import com.dtac.employee.form.EmployeeForm;
/** 
 * MyEclipse Struts
 * Creation date: 09-13-2011
 */
public class EmployeeListAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();		
		map.put("employeeform.button.copyto",	"copyto");	
		map.put("employeeform.button.search",	"search");
		map.put("employeeform.button.view",		"view");
		return map;
	}

	public ActionForward search(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //30-09-2011
		String forwardText = "success";
		String loginId 		= "";
		String appCode  	= "hr21";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			EmployeeForm employeeForm = (EmployeeForm) form;
			String empID		= employeeForm.getEmpID().toUpperCase();
			String empNameT		= new String(employeeForm.getEmpNameT().getBytes("ISO8859_1"),"utf-8");
			String empLastNameT	= new String(employeeForm.getEmpLastNameT().getBytes("ISO8859_1"),"utf-8");
			String empTypeCode	= employeeForm.getEmpTypeCode();			
			String empDeptCode	= employeeForm.getEmpDeptCode();
			String offiCode		= employeeForm.getOffiCode();
			//String workDate		= employeeForm.getWorkDate();
			String status		= employeeForm.getStatus();
			
			DBEmployee dbEmployee = new DBEmployee();
			List employeeList = dbEmployee.GetEmployeeList(empID, empNameT, empLastNameT, empTypeCode, empDeptCode, offiCode, status);
			if (employeeList.size() > 0) request.setAttribute("employeeList", employeeList);
			
			DBMemberType dbMemberType = new DBMemberType();
			List memberTypeList = dbMemberType.GetMemberTypeList("", "", "");
			if (memberTypeList.size() > 0) request.setAttribute("memberTypeList", memberTypeList);
			
			DBMasterTable dbMasterTable = new DBMasterTable();
			List deptList = dbMasterTable.GetMasterTableDTList("dept", "", "", "AC");
			if (deptList.size() > 0) request.setAttribute("deptList", deptList);

			List offiList = dbMasterTable.GetMasterTableDTList("offi", "", "", "AC");
			if (offiList.size() > 0) request.setAttribute("offiList", offiList);

			employeeForm.setEmpNameT(empNameT);
			session.setAttribute("empTypeCode", empTypeCode);
			session.setAttribute("empDeptCode", empDeptCode);
			session.setAttribute("offiCode", offiCode);
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward view(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //08-09-2012
		String forwardText 	= "view";
		String loginId 		= "";
		String appCode  	= "hr21";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
       
			
			EmployeeForm employeeForm = (EmployeeForm) form;
			String empID		= employeeForm.getEmpID().trim().toUpperCase();
			String empNameT		= new String(employeeForm.getEmpNameT().getBytes("ISO8859_1"),"utf-8");
			String empLastNameT	= new String(employeeForm.getEmpLastNameT().getBytes("ISO8859_1"),"utf-8");
			String empTypeCode 	= employeeForm.getEmpTypeCode();
			String empDeptCode 	= employeeForm.getEmpDeptCode();
			String offiCode		= employeeForm.getOffiCode();
			
			employeeForm.setEmpNameT(empNameT);
			employeeForm.setEmpLastNameT(empLastNameT);
			
			DBMemberType dbMemberType = new DBMemberType();
			List memberTypeList;
			
			DBMasterTable dbMasterTable = new DBMasterTable();
			List deptList;
			
			DBEmployee dbEmployee = new DBEmployee();
			List employeeList;
			if ((empID.length() == 5) && !dbEmployee.CheckEmployee(empID, "")) {
					//dbMemberType.GetMemberTypeList("", empID.substring(0,2), "").size() == 1 &&
					//dbMasterTable.GetMasterTableDTList("dept", empDeptCode, "", "AC").size() == 1) {
				//dbMemberType.GetMemberTypeList("", empID.substring(3,5), "").size() == 1 &&
				//dbMasterTable.GetMasterTableDTList("dept", empID.substring(0,3), "", "AC").size() == 1) {

				//add new emp
				
				dbEmployee.AddEmployee(empID, empTypeCode, empDeptCode);
				
			}
			if ((empID.length() == 5) && dbEmployee.CheckEmployee(empID, "")) {
				employeeList = dbEmployee.GetEmployeeList(empID, "", "", "", "", "", "");
				if (employeeList.size() == 1) {
					EmployeeForm  empInfo =   (EmployeeForm) employeeList.get(0);
					
					employeeForm.setEmpDeptCode(empInfo.getEmpDeptCode());
					employeeForm.setEmpTypeCode(empInfo.getEmpTypeCode());					
					employeeForm.setEmpNameT(empInfo.getEmpNameT());
					employeeForm.setEmpLastNameT(empInfo.getEmpLastNameT());
					employeeForm.setEmpNameE(empInfo.getEmpNameE());
					employeeForm.setEmpLastNameE(empInfo.getEmpLastNameE());
					employeeForm.setOffiCode(empInfo.getOffiCode());
					employeeForm.setOldEmpID(empInfo.getOldEmpID());
					employeeForm.setAddress1(empInfo.getAddress1());
					employeeForm.setAddress2(empInfo.getAddress2());
					employeeForm.setTel1(empInfo.getTel1());
					employeeForm.setEmail1(empInfo.getEmail1());
					employeeForm.setNation(empInfo.getNation());
					employeeForm.setSex(empInfo.getSex());
					employeeForm.setMarryStatus(empInfo.getMarryStatus());
					employeeForm.setAllChild(empInfo.getAllChild());
					employeeForm.setEdcChild(empInfo.getEdcChild());
					employeeForm.setDeductType(empInfo.getDeductType());
			     
			     	employeeForm.setAccountNo(empInfo.getAccountNo());
			     	employeeForm.setIdPop(empInfo.getIdPop());
			     	employeeForm.setTaxID(empInfo.getTaxID());
			     	employeeForm.setSocialNo(empInfo.getSocialNo());
			     	employeeForm.setInsure(empInfo.getInsure());
			     	employeeForm.setDevote(empInfo.getDevote());
			     	employeeForm.setInterestLoan(empInfo.getInterestLoan());
			     
			     	employeeForm.setBirthDay(empInfo.getBirthDay());
				 	employeeForm.setWorkDate(empInfo.getWorkDate());
				 	employeeForm.setExpDate(empInfo.getExpDate());
				 	employeeForm.setEducCode(empInfo.getEducCode());
				 	employeeForm.setMajor(empInfo.getMajor());
				 	employeeForm.setGroupName(empInfo.getGroupName());
				 	employeeForm.setProjCode(empInfo.getProjCode());
				 	employeeForm.setSubProjCode(empInfo.getSubProjCode());
				 	employeeForm.setPfundDate(empInfo.getPfundDate());	
					employeeForm.setPfFlag(empInfo.getPfFlag());
					employeeForm.setPunchCard(empInfo.getPunchCard());
					employeeForm.setStatus(empInfo.getStatus());		     
				} 
			} else {
				forwardText = "success";
				request.setAttribute("alertMessage", "select employee!");
				
				if (dbMasterTable.GetMasterTableDTList("dept", empDeptCode, "", "AC").size() != 1)
					request.setAttribute("alertMessage", "check department data.");
				
				empTypeCode = employeeForm.getEmpTypeCode();
				empDeptCode = employeeForm.getEmpDeptCode();
				offiCode	= employeeForm.getOffiCode();
				employeeList = dbEmployee.GetEmployeeList("", "", "", empTypeCode, empDeptCode, offiCode, "AC");
				if (employeeList.size() > 0) request.setAttribute("employeeList", employeeList);
								
			}

			if (forwardText.equals("view")) {
				request.setAttribute("empID", empID);
				
				List educList = dbMasterTable.GetMasterTableDTList("educ", "", "", "");
				if (educList.size() > 0) request.setAttribute("educList", educList);
			}									
			memberTypeList = dbMemberType.GetMemberTypeList("", "", "");
			if (memberTypeList.size() > 0) request.setAttribute("memberTypeList", memberTypeList);

			deptList = dbMasterTable.GetMasterTableDTList("dept", "", "", "AC");
			if (deptList.size() > 0) request.setAttribute("deptList", deptList);

			List offiList = dbMasterTable.GetMasterTableDTList("offi", "", "", "AC");
			if (offiList.size() > 0) request.setAttribute("offiList", offiList);

		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
}