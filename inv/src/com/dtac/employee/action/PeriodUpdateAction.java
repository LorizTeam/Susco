/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.employee.action;
import java.util.HashMap;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.admin.data.DBYear;
import com.dtac.employee.data.DBPeriod;
import com.dtac.employee.form.PeriodForm;
import com.dtac.utils.DateUtil;
/** 
 * MyEclipse Struts
 * Creation date: 21-08-2012
 */
public class PeriodUpdateAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();
		map.put("periodform.button.cancel", 	"cancel");		
		map.put("periodform.button.update", 	"update");
		return map;
	}
	
	public ActionForward update(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) 
	throws Exception {	//21-08-2012
		String loginId		= "";
		String appCode 		= "hr31";
		String forwardText  = "repeat";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"mant")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			PeriodForm periodForm = (PeriodForm) form;
			String year  	= periodForm.getYear();
			String month	= periodForm.getMonth();
			String periodNo	= periodForm.getPeriodNo();
			String salTypeCode = periodForm.getSalTypeCode();
			String salTypeName = new String(periodForm.getSalTypeName().getBytes("ISO8859_1"),"utf-8");
			String socialRate  = periodForm.getSocialRate();
			String startDate= periodForm.getStartDate();
			String endDate	= periodForm.getEndDate();
			String currFlag	= periodForm.getCurrFlag();
			String status	= periodForm.getStatus();
			
			String alertMessage = "";	
			DateUtil dateUtil = new DateUtil();
			DBPeriod dbPeriod = new DBPeriod();
			
			if (startDate.trim().length() != 10) alertMessage = "check begin date";
			else if (!dateUtil.isValidDateStr(dateUtil.CnvToYYYYMMDDEngYear(startDate, '-'))) alertMessage = "check begin date";

			else if (endDate.trim().length() != 10) alertMessage = "check end date";
			else if (!dateUtil.isValidDateStr(dateUtil.CnvToYYYYMMDDEngYear(endDate, '-'))) alertMessage = "check end date";

			else if (socialRate.equals("")) alertMessage = "กรอก % หักประกันสังคม";
			else if (Float.parseFloat(socialRate) < 0) alertMessage = "% หักประกันสังคมต้องมากกว่า 0";
			else {
				forwardText = "success";
				dbPeriod.UpdatePeriod(year, month, periodNo, salTypeCode, socialRate, startDate, endDate, status, loginId);
				if (currFlag.equals("Y")) dbPeriod.SetCurrentPeriod(year, month, periodNo, salTypeCode);
				
				DBYear dbYear = new DBYear();
				List yearList = dbYear.GetYearList("", "");
				if (yearList.size() > 0) request.setAttribute("yearList", yearList);
								
				List periodList = dbPeriod.GetPeriodList(year, "", "", salTypeCode, "");
				if (periodList.size() > 0) request.setAttribute("periodList", periodList);
				
				periodForm.setMonth("");
			}
			periodForm.setSalTypeName(salTypeName);
			request.setAttribute("alertMessage", alertMessage);
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward cancel(ActionMapping mapping, ActionForm form,
  		HttpServletRequest request, HttpServletResponse response) 
  	throws Exception {	//20-08-2012
  		String forwardText 	= "success";
  		String loginId 		= "";
		String appCode  	= "hr31";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"mant")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			PeriodForm periodForm = (PeriodForm) form;
			String year  	= periodForm.getYear();
			String salTypeCode = periodForm.getSalTypeCode();
			
			DBYear dbYear = new DBYear();
			List yearList = dbYear.GetYearList("", "");
			if (yearList.size() > 0) request.setAttribute("yearList", yearList);
			
			DBPeriod dbPeriod 	= new DBPeriod();
			List periodList = dbPeriod.GetPeriodList(year, "", "", salTypeCode, "");
			if (periodList.size() > 0) request.setAttribute("periodList", periodList);
					
			periodForm.setMonth("");
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
  	}
}