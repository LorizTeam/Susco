/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.inventory.action;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.admin.data.DBMasterTable;
import com.dtac.inventory.data.DBMaterial;
import com.dtac.inventory.data.DBMaterialType;
import com.dtac.inventory.form.MaterialForm;
 
/** 
 * MyEclipse Struts
 * Creation date: 22-04-2012
 */
public class MaterialViewAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();		
		map.put("materialform.button.update",	"update");		
		map.put("materialform.button.cancel",	"cancel");
		map.put("materialform.button.copymat",	"copymaterial");
		return map;
	}

	public ActionForward cancel(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //13-04-2012
		String forwardText 	= "success";
		String loginId 		= "";
		String appCode  	= "mm23";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			MaterialForm materialForm = (MaterialForm) form;			
			String matTypeCode	= materialForm.getMatTypeCode();
			
			DBMaterialType dbMaterialType = new DBMaterialType();
			List matTypeList = dbMaterialType.GetMaterialTypeList("");
			if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);

			List matGrpList = dbMaterialType.GetMaterialGrpList(matTypeCode, "", "AC");
			if (matGrpList.size() > 0 && !matTypeCode.equals("")) request.setAttribute("matGrpList", matGrpList);

			DBMaterial dbMaterial = new DBMaterial();
			List materialList = dbMaterial.GetMaterialList("", "", "","", matTypeCode, "", "", "", "", "", "", "AC");
			if (materialList.size() > 0) request.setAttribute("materialList", materialList);

			DBMasterTable dbMasterTable = new DBMasterTable();
			List unitList = dbMasterTable.GetMasterTableDTList("unit", "", "", "AC");
			if (unitList.size() > 0) request.setAttribute("unitList", unitList);
		
			List brandList = dbMasterTable.GetMasterTableDTList("bran", "", "", "AC");
			if (brandList.size() > 0) request.setAttribute("brandList", brandList);
			
			List colorList = dbMasterTable.GetMasterTableDTList("colo", "", "", "AC");
			if (colorList.size() > 0) request.setAttribute("colorList", colorList);

			List stuffList = dbMasterTable.GetMasterTableDTList("stuf", "", "", "AC");
			if (stuffList.size() > 0) request.setAttribute("stuffList", stuffList);
			
			List sizeList = dbMasterTable.GetMasterTableDTList("size", "", "", "AC");
			if (sizeList.size() > 0) request.setAttribute("sizeList", sizeList);
			
			materialForm.initial();
			materialForm.setMatTypeCode(matTypeCode);						
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward update(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //28-08-2012
		String forwardText 	= "success";
		String loginId 		= "";
		String appCode  	= "mm23";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
       			
			MaterialForm materialForm = (MaterialForm) form;			
			String matCode		= materialForm.getMatCode();
			String matName		= new String(materialForm.getMatName().getBytes("ISO8859_1"),"utf-8");
			String matSendName	= new String(materialForm.getMatSendName().getBytes("ISO8859_1"),"utf-8");  materialForm.setMatSendName(matSendName);
			String matSearchName= new String(materialForm.getMatSearchName().getBytes("ISO8859_1"),"utf-8");
			String pUnit 		= materialForm.getpUnit();
			String rUnit 		= materialForm.getrUnit();
			String iUnit 		= materialForm.getiUnit();
			String matTypeCode	= materialForm.getMatTypeCode();
			String matGrpCode	= materialForm.getMatGrpCode(); if (matGrpCode == null) matGrpCode = "";
			String matRemark 	= new String(materialForm.getMatRemark().getBytes("ISO8859_1"),"utf-8");
			String matBrandCode	= materialForm.getMatBrandCode();
			String matSupplCode = new String(materialForm.getMatSupplCode().getBytes("ISO8859_1"),"utf-8");
			String matSupplName = new String(materialForm.getMatSupplName().getBytes("ISO8859_1"),"utf-8");
			String matColorCode = materialForm.getMatColorCode();	
			String matStuffCode	= materialForm.getMatStuffCode();
			String refMatCode	= materialForm.getRefMatCode();
			String qtyMaxStock	= materialForm.getQtyMaxStock();
			String qtyMinStock	= materialForm.getQtyMinStock();
			String matStatus	= materialForm.getMatStatus();
			String pic1			= materialForm.getPic1();
			String pic2			= "";
			String alertMessage = "";
			String normalPrice = materialForm.getNormalPrice();
			String empPrice = materialForm.getEmpPrice();
			String vipPrice = materialForm.getVipPrice();
			String costPrice = materialForm.getCostPrice();
			String specialPrice = materialForm.getSpecialPrice();
			String stock1 = materialForm.getStock1();
			String stock2 = materialForm.getStock2();
			String rop = materialForm.getRop();
			
			DBMaterial dbMaterial = new DBMaterial();
	//		DBVender dbVender = new DBVender();
			
			if (qtyMinStock.equals("")) qtyMinStock = "0";
			
			if (matName.equals("")) alertMessage = "กรอกชื่อสินค้า";
			else if (matName.contains("\"") || matName.contains("'")) alertMessage = "มีอักขระ '' ให้พิมพ์นิ้ว หรือฟุต";
			
			else if (matGrpCode.equals("")) alertMessage = "กรอกประเภทสินค้าย่อย";
			
			//else if (dbMaterial.CheckRefMatCode(matCode, refMatCode)) alertMessage = "พบรหัสสินค้าอ้างอิงนี้แล้ว";

		//	else if (!dbVender.CheckVender(matSupplCode)) alertMessage = "ไม่พบรหัสผู้ขายนี้";
						
			if (alertMessage.equals("")) {
				dbMaterial.UpdateMaterial(matCode, matName, matSendName, matSearchName, pUnit, rUnit, iUnit, matTypeCode, 
						matGrpCode, matRemark, matBrandCode, matSupplCode, matColorCode, matStuffCode, refMatCode, 
						qtyMaxStock, qtyMinStock, matStatus, stock1, stock2, normalPrice, empPrice, vipPrice, costPrice, 
						specialPrice, rop, pic1);				
			
		//	if (matStatus.equals("CA")) {
		//		DBUmbMaterial dbUmbMaterial = new DBUmbMaterial();
		//		dbUmbMaterial.UpdateUmbMaterialStatus(matCode, "CA");
		//		}
				List materialList = dbMaterial.GetMaterial(matCode);
				if (materialList.size() > 0) request.setAttribute("materialList", materialList);
				
				materialForm.initial();
				materialForm.setMatTypeCode(matTypeCode);
			} else {
				forwardText = "repeat";
				request.setAttribute("alertMessage", alertMessage);
				
				materialForm.setMatName(matName);
				materialForm.setMatSearchName(matSearchName);
				materialForm.setMatSupplCode(matSupplCode);
				materialForm.setMatSupplName(matSupplName);
				materialForm.setMatRemark(matRemark);
				
				
				request.setAttribute("pic1", pic1);
				request.setAttribute("pic2", pic2);
				request.setAttribute("matCode", matCode);
			}
			DBMasterTable dbMasterTable = new DBMasterTable();
			List unitList = dbMasterTable.GetMasterTableDTList("unit", "", "", "AC");
			if (unitList.size() > 0) request.setAttribute("unitList", unitList);
		
			List brandList = dbMasterTable.GetMasterTableDTList("bran", "", "", "AC");
			if (brandList.size() > 0) request.setAttribute("brandList", brandList);
			
			List colorList = dbMasterTable.GetMasterTableDTList("colo", "", "", "AC");
			if (colorList.size() > 0) request.setAttribute("colorList", colorList);
			
			List stuffList = dbMasterTable.GetMasterTableDTList("stuf", "", "", "AC");
			if (stuffList.size() > 0) request.setAttribute("stuffList", stuffList);
			
			List sizeList = dbMasterTable.GetMasterTableDTList("size", "", "", "AC");
			if (sizeList.size() > 0) request.setAttribute("sizeList", sizeList);

			DBMaterialType dbMaterialType = new DBMaterialType();
			List matTypeList = dbMaterialType.GetMaterialTypeList("");
			if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);

			List matGrpList = dbMaterialType.GetMaterialGrpList(matTypeCode, "", "AC");
			if (matGrpList.size() > 0 && !matTypeCode.equals("")) request.setAttribute("matGrpList", matGrpList);
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward copymaterial(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //12-04-2012
		String forwardText 	= "success";
		String loginId 		= "";
		String appCode  	= "mm23";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
       			
			MaterialForm materialForm = (MaterialForm) form;			
			String matCode		= materialForm.getMatCode();
			String newMatCode	= materialForm.getNewMatCode().toUpperCase();
			String matName		= new String(materialForm.getMatName().getBytes("ISO8859_1"),"utf-8");
			String matSearchName= new String(materialForm.getMatSearchName().getBytes("ISO8859_1"),"utf-8");
			//String pUnit 		= materialForm.getpUnit();
			//String rUnit 		= materialForm.getrUnit();
			//String iUnit 		= materialForm.getiUnit();
			String matTypeCode	= materialForm.getMatTypeCode();
			String matGrpCode	= materialForm.getMatGrpCode(); if (matGrpCode == null) matGrpCode = "";
			String matRemark 	= new String(materialForm.getMatRemark().getBytes("ISO8859_1"),"utf-8");
			String matBrandCode	= materialForm.getMatBrandCode();
			String matSupplCode = new String(materialForm.getMatSupplCode().getBytes("ISO8859_1"),"utf-8");
			String matSupplName = new String(materialForm.getMatSupplName().getBytes("ISO8859_1"),"utf-8");
			String matColorCode = materialForm.getMatColorCode();	
			String matStuffCode	= materialForm.getMatStuffCode();
			String refMatCode	= new String (materialForm.getRefMatCode().getBytes("ISO8859_1"),"utf-8");
			String reqOrdFlag	= materialForm.getReqOrdFlag();
			String qtyMinStock	= materialForm.getQtyMinStock();
			String pic1			= "";
			String pic2			= "";
			String alertMessage = "";
			
			DBMaterial dbMaterial = new DBMaterial();
			DBMasterTable dbMasterTable = new DBMasterTable();
			if (newMatCode.equals("")) alertMessage = "กรอกรหัสสินค้าใหม่";
			
			else if (dbMaterial.CheckMaterial(newMatCode)) alertMessage = "พบรหัสสินค้าใหม่แล้ว";
			
			if (alertMessage.equals("")) {
				dbMaterial.CopyMaterial(matCode, newMatCode)			;	
			
				List materialList = dbMaterial.GetMaterial(newMatCode);
				if (materialList.size() > 0) request.setAttribute("materialList", materialList);
				
				materialForm.initial();
				materialForm.setMatTypeCode(matTypeCode);
			} else {
				forwardText = "repeat";
				request.setAttribute("alertMessage", alertMessage);
				
				materialForm.setMatName(matName);
				materialForm.setMatSearchName(matSearchName);
				materialForm.setMatSupplCode(matSupplCode);
				materialForm.setMatSupplName(matSupplName);
				materialForm.setMatRemark(matRemark);
				
				request.setAttribute("pic1", pic1);
				request.setAttribute("pic2", pic2);
				request.setAttribute("matCode", matCode);
				
				
				List unitList = dbMasterTable.GetMasterTableDTList("unit", "", "", "AC");
				if (unitList.size() > 0) request.setAttribute("unitList", unitList);
			
				List brandList = dbMasterTable.GetMasterTableDTList("bran", "", "", "AC");
				if (brandList.size() > 0) request.setAttribute("brandList", brandList);
				

			}
			List unitList = dbMasterTable.GetMasterTableDTList("unit", "", "", "AC");
			if (unitList.size() > 0) request.setAttribute("unitList", unitList);
		
			List brandList = dbMasterTable.GetMasterTableDTList("bran", "", "", "AC");
			if (brandList.size() > 0) request.setAttribute("brandList", brandList);
			
			List colorList = dbMasterTable.GetMasterTableDTList("colo", "", "", "AC");
			if (colorList.size() > 0) request.setAttribute("colorList", colorList);
			
			List stuffList = dbMasterTable.GetMasterTableDTList("stuf", "", "", "AC");
			if (stuffList.size() > 0) request.setAttribute("stuffList", stuffList);
			
			List sizeList = dbMasterTable.GetMasterTableDTList("size", "", "", "AC");
			if (sizeList.size() > 0) request.setAttribute("sizeList", sizeList);

			DBMaterialType dbMaterialType = new DBMaterialType();
			List matTypeList = dbMaterialType.GetMaterialTypeList("");
			if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);

			List matGrpList = dbMaterialType.GetMaterialGrpList(matTypeCode, "", "AC");
			if (matGrpList.size() > 0 && !matTypeCode.equals("")) request.setAttribute("matGrpList", matGrpList);
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
}