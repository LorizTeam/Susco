/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.inventory.action;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.ImageButtonBean;

 
import com.dtac.admin.data.DBLogin;
import com.dtac.inventory.data.DBMaterialTake;
import com.dtac.inventory.data.DBMemberSearch;
import com.dtac.inventory.data.DBStudent;
import com.dtac.inventory.data.DBWahoLocation;
import com.dtac.inventory.form.ChoosetypeForm;
import com.dtac.inventory.form.MaterialTakeForm;
import com.dtac.inventory.form.MemberSearchForm;
import com.dtac.inventory.form.WarehouseForm;
import com.dtac.utils.DBConnect;
import com.dtac.utils.DateUtil;
import com.dtac.utils.HistoryMaterial;
import com.dtac.utils.Stock;



/** 
 * MyEclipse Struts
 * Creation date: 08-22-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class MemberSearchAction extends Action {

	DBConnect agent = new DBConnect();
	Connection conn	= null;
	Statement pStmt = null;
	ResultSet rs	= null;
	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {

		String loginId 		= "";
		String userName 	= "";
		String appCode  	= "mm42";
		
		HttpSession session = request.getSession();
		if (session.isNew()) {
			session.invalidate();
			request.setAttribute("alertMessage","Session Timeout. Login again.");
			return mapping.findForward("relogin");
		} else {
			loginId = (String) session.getAttribute("loginId");
			userName= (String) session.getAttribute("userName");
			if (loginId == null) {
				request.setAttribute("alertMessage","Please Login.");
				return mapping.findForward("relogin");
			}
		}
		DBLogin dbLogin = new DBLogin();			
		if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
			request.setAttribute("alertMessage","You don't have authorize.");
			return mapping.findForward("alertmsg");
		}
		
		List<MemberSearchForm> itemlist = new ArrayList<MemberSearchForm> ();
		MemberSearchForm memberSearchForm = (MemberSearchForm) form;		
		// TODO Auto-generated method stub
		
		String forwardText = null;
	 
	//	if(chkbutton.equals("Welcome")||chkbutton==null)
	//	{
			
		
		String cardid = memberSearchForm.getCardid();
		String qtygoods = memberSearchForm.getQty();
		String matcod = memberSearchForm.getMatcode();
		
		// button ok
		String ok = memberSearchForm.getOk();
		String print = memberSearchForm.getPrint();
		String delete = memberSearchForm.getDelete();
		String save = memberSearchForm.getSave();
		String chk	=	memberSearchForm.getChk();
		String billpayment = memberSearchForm.getBillpayment();
			try
			{			
				
			String one=	memberSearchForm.getOne();
			String two=	memberSearchForm.getTwo();
			String three=	memberSearchForm.getThree();
			String four=	memberSearchForm.getFour();
			String five=	memberSearchForm.getFive();
			String six=	memberSearchForm.getSix();
			String seven=	memberSearchForm.getSeven();
			String eight=	memberSearchForm.getEight();
			String nine=	memberSearchForm.getNine();
			String zero=	memberSearchForm.getZero();
			String buttcard=	memberSearchForm.getButtcard();
			String buttmat= memberSearchForm.getButtmat();
			String buttqty= memberSearchForm.getButtqty();
			String CardID= "";
			String Qty= "";
			String MatCod= "";
			if(buttcard!=null){
				memberSearchForm.setHdbuttcard("true");
				memberSearchForm.setHdbuttqty("false");
				memberSearchForm.setHdbuttmat("false");
			}
			if(buttqty!=null){
				memberSearchForm.setHdbuttcard("false");
				memberSearchForm.setHdbuttqty("true");
				memberSearchForm.setHdbuttmat("false");
			}
			if(buttmat!=null){
				memberSearchForm.setHdbuttcard("false");
				memberSearchForm.setHdbuttqty("false");
				memberSearchForm.setHdbuttmat("true");
			}
			
		// select cardid	 button C		
	/*			if(memberSearchForm.getHdbuttcard().equals("true")){
     
			    if(one!=null){
				CardID= cardid + one;
			    }
			    if(two!=null){
					CardID= cardid + two;
				}
			    if(three!=null){
					CardID= cardid + three;
				    }
				 if(four!=null){
						CardID= cardid + four;
					}
				 if(five!=null){
						CardID= cardid + five;
					 }
				 if(six!=null){
					 	CardID= cardid + six;
					}
				 if(seven!=null){
						CardID= cardid + seven;
					 }
				if(eight!=null){
						CardID= cardid + eight;
				    }
				if(nine!=null){
					CardID= cardid + nine;
					}
				if(zero!=null){
					CardID= cardid + zero;
					}
			memberSearchForm.setCardid(CardID);   
	 
			// data old
			int i = 0;
				if(request.getParameterValues("oldMatCode")!=null){
					String[] oldMatCode		=	request.getParameterValues("oldMatCode");
					String[] oldMatName		=	request.getParameterValues("oldMatName");
					String[] oldquantity	=	request.getParameterValues("oldquantity");
					String[] oldamount		=	request.getParameterValues("oldamount");
					String[] oldtotalamount	=	request.getParameterValues("oldtotalamount");
					
					for(int x=0; x<oldMatCode.length; x++){
						MemberSearchForm olditem = new MemberSearchForm();
						i=i+1;
					 
						olditem.setMatcode(oldMatCode[x]);
						olditem.setMatname(new String (oldMatName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setQty(oldquantity[x]);
						olditem.setAmount(Float.parseFloat(oldamount[x]));
						olditem.setTotalamount(Float.parseFloat(oldtotalamount[x]));
			//			sumamount = sumamount+Float.parseFloat(oldtotalamount[x]) ;
						itemlist.add(olditem);
					}
				}
				request.setAttribute("itemlist", itemlist);
			
		} 
	
				// select qty		button Q	
				if(memberSearchForm.getHdbuttqty().equals("true")){
     
			    if(one!=null){
			    	Qty= qtygoods + one;
			    }
			    if(two!=null){
			    	Qty= qtygoods + two;
				}
			    if(three!=null){
			    	Qty= qtygoods + three;
				    }
				 if(four!=null){
					 Qty= qtygoods + four;
					}
				 if(five!=null){
					 Qty= qtygoods + five;
					 }
				 if(six!=null){
					 Qty= qtygoods + six;
					}
				 if(seven!=null){
					 Qty= qtygoods + seven;
					 }
				if(eight!=null){
					Qty= qtygoods + eight;
				    }
				if(nine!=null){
					Qty= qtygoods + nine;
					}
				if(zero!=null){
					Qty= qtygoods + zero;
					}
			memberSearchForm.setQty(Qty);
			
			// data old
			int i = 0;
				if(request.getParameterValues("oldMatCode")!=null){
					String[] oldMatCode		=	request.getParameterValues("oldMatCode");
					String[] oldMatName		=	request.getParameterValues("oldMatName");
					String[] oldquantity	=	request.getParameterValues("oldquantity");
					String[] oldamount		=	request.getParameterValues("oldamount");
					String[] oldtotalamount	=	request.getParameterValues("oldtotalamount");
					
					for(int x=0; x<oldMatCode.length; x++){
						MemberSearchForm olditem = new MemberSearchForm();
						i=i+1;
					 
						olditem.setMatcode(oldMatCode[x]);
						olditem.setMatname(new String (oldMatName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setQty(oldquantity[x]);
						olditem.setAmount(Float.parseFloat(oldamount[x]));
						olditem.setTotalamount(Float.parseFloat(oldtotalamount[x]));
				//		sumamount = sumamount+Float.parseFloat(oldtotalamount[x]) ;
						itemlist.add(olditem);
					}
				}
				request.setAttribute("itemlist", itemlist);
	 
		} 		
				// select matcode			
				if(memberSearchForm.getHdbuttmat().equals("true")){

				    if(one!=null){
				    	MatCod= matcod + one;
				    }
				    if(two!=null){
				    	MatCod= matcod+ two;
				   }
				    if(three!=null){
				    	MatCod= matcod + three;
					    }
					 if(four!=null){
						 MatCod= matcod + four;
						}
					 if(five!=null){
						 MatCod= matcod + five;
						 }
					 if(six!=null){
						 MatCod= matcod + six;
						}
					 if(seven!=null){
						 MatCod= matcod + seven;
						 }
					if(eight!=null){
						MatCod= matcod + eight;
					    }
					if(nine!=null){
						MatCod= matcod + nine;
						}
					if(zero!=null){
						MatCod= matcod + zero;
						}
				memberSearchForm.setMatcode(MatCod);
		 
				// data old
				int i = 0;
					if(request.getParameterValues("oldMatCode")!=null){
						String[] oldMatCode		=	request.getParameterValues("oldMatCode");
						String[] oldMatName		=	request.getParameterValues("oldMatName");
						String[] oldquantity	=	request.getParameterValues("oldquantity");
						String[] oldamount		=	request.getParameterValues("oldamount");
						String[] oldtotalamount	=	request.getParameterValues("oldtotalamount");
						
						for(int x=0; x<oldMatCode.length; x++){
							MemberSearchForm olditem = new MemberSearchForm();
							i=i+1;
						 
							olditem.setMatcode(oldMatCode[x]);
							olditem.setMatname(new String (oldMatName[x].getBytes("ISO8859_1"),"utf-8"));
							olditem.setQty(oldquantity[x]);
							olditem.setAmount(Float.parseFloat(oldamount[x]));
							olditem.setTotalamount(Float.parseFloat(oldtotalamount[x]));
				//			sumamount = sumamount+Float.parseFloat(oldtotalamount[x]) ;
							itemlist.add(olditem);
						}
					}
					request.setAttribute("itemlist", itemlist);
			} 	*/
				if(ok!=null){
					String studentName		= 	new String(memberSearchForm.getStudentName().getBytes("ISO8859_1"),"utf-8"); // à¸Šà¸·à¹ˆà¸­-à¸™à¸²à¸¡à¸ªà¸�à¸¸à¸¥à¸™à¸±à¸�à¹€à¸£à¸µà¸¢à¸™
					String studentClass		= 	new String(memberSearchForm.getStudentClass().getBytes("ISO8859_1"),"utf-8");
					String matCode 	= memberSearchForm.getMatcode();
					String matName 	= "";
					String qty 		= memberSearchForm.getQty();
					String matTypeCode = "";
					String matGrpCode = "";
					String alertMessage = "";
					String textBoxId = "ok",serial ="",refmatcode="";
					if(qtygoods!=""&&qty==""){
						qty = qtygoods;
					}
						
					float amount	 = 0f;
					float totalamount = 0f;
					float sumamount = 0f;
					int iqty = Integer.parseInt(qty);
					
					conn = agent.getConnectMYSql();
					
					String sqlStmt = "SELECT * FROM mmmaterial WHERE serial = '"+matCode+"'" ;
					sqlStmt = sqlStmt + " and serial <> '' ORDER BY serial " ;
					String usefor = "selectok" ;
					//System.out.println(sqlStmt);				
					pStmt = conn.createStatement();
					rs = pStmt.executeQuery(sqlStmt);			
					while (rs.next()) {
						serial			= rs.getString("serial");
						matCode			= rs.getString("matcode");
						matName			= rs.getString("matname");
						amount			= Float.parseFloat(rs.getString("pricesale"));
						matTypeCode		= rs.getString("mattypecode");
						matGrpCode		= rs.getString("matgrpcode");
						refmatcode		= rs.getString("refmatcode");
						totalamount = iqty*amount;
						
			// add data new			
					 
						itemlist.add(new MemberSearchForm(usefor,serial,matCode, matName, qty, amount, totalamount, matTypeCode, matGrpCode,refmatcode));
					}
					
					rs.close();
					pStmt.close();
					conn.close();
			
					// data old
					int i = 0;
						if(request.getParameterValues("oldMatCode")!=null){
							String[] oldMatCode		=	request.getParameterValues("oldMatCode");
							String[] oldMatName		=	request.getParameterValues("oldMatName");
							String[] oldquantity	=	request.getParameterValues("oldquantity");
							String[] oldamount		=	request.getParameterValues("oldamount");
							String[] oldtotalamount	=	request.getParameterValues("oldtotalamount");
							String[] oldMatTypeCode	=	request.getParameterValues("oldMatTypeCode");
							String[] oldMatGrpCode	=	request.getParameterValues("oldMatGrpCode");
							String[] oldSerial 		= 	request.getParameterValues("oldSerial");
							String[] oldRefmatcode 		= 	request.getParameterValues("oldRefmatcode");
							for(int x=0; x<oldMatCode.length; x++){
								MemberSearchForm olditem = new MemberSearchForm();
								i=i+1;
								olditem.setSerial(oldSerial[x]);
								olditem.setMatcode(oldMatCode[x]);
								olditem.setMatname(new String (oldMatName[x].getBytes("ISO8859_1"),"utf-8"));
								olditem.setQty(oldquantity[x]);
								olditem.setAmount(Float.parseFloat(oldamount[x]));
								olditem.setTotalamount(Float.parseFloat(oldtotalamount[x]));
								olditem.setMatTypeCode(oldMatTypeCode[x]);
								olditem.setMatGrpCode(oldMatGrpCode[x]);
								olditem.setRefmatcode(oldRefmatcode[x]);
								sumamount = sumamount+Float.parseFloat(oldtotalamount[x]) ;
								itemlist.add(olditem);
							}
						}
						
						sumamount = sumamount+totalamount ;
						memberSearchForm.setStudentName(studentName);
						memberSearchForm.setStudentClass(studentClass);
						memberSearchForm.setMatcode("");
						memberSearchForm.setQty("1");
						memberSearchForm.setSumamount(sumamount);
						
						request.setAttribute("textBoxId", textBoxId);
						request.setAttribute("alertMessage", alertMessage);
						request.setAttribute("itemlist", itemlist);
				}
				
				if(print!=null){
					memberSearchForm.setMatcode("");
				    String sysdate          = memberSearchForm.getSysdate();
					String doctypecode		=	"SEL";
					String docyear			=	Integer.toString((Integer.parseInt(sysdate.substring(6,10))+543));
					String docmonth			=	sysdate.substring(3,5);
					String docNo			=	memberSearchForm.getRequestNo(); //à¸£à¸«à¸±à¸ªà¹€à¸­à¸�à¸ªà¸²à¸£
					String studentName		= 	new String(memberSearchForm.getStudentName().getBytes("ISO8859_1"),"utf-8"); // à¸Šà¸·à¹ˆà¸­-à¸™à¸²à¸¡à¸ªà¸�à¸¸à¸¥à¸™à¸±à¸�à¹€à¸£à¸µà¸¢à¸™
					String studentClass		=	new String(memberSearchForm.getStudentClass().getBytes("ISO8859_1"),"utf-8"); 
				//			String cardid			=   memberSearchForm.getCardid(); //à¸£à¸«à¸±à¸ªà¸šà¸±à¸•à¸£à¸™à¸±à¸�à¹€à¸£à¸µà¸¢à¸™
					float totpay			= 	memberSearchForm.getTotpay(); //à¸ˆà¹ˆà¸²à¸¢
					float totbalance		= 	memberSearchForm.getTotbalance(); 	//à¸—à¸­à¸™
					String docStatus 		= "AC";
					String semesterNo	= memberSearchForm.getSemesterNo();
					//update Quantity
					String alertMessage     = 	"";
					
				    // write header record
					DBMemberSearch dbMemberSearch = new DBMemberSearch();
					Stock st = new Stock();
					DateUtil dateUtil = new DateUtil();	
					String dateTime = dateUtil.curDateTime();
					
					String chkDocNo = dbMemberSearch.SelectDocNo(docNo, docyear);
					String chkRunDocNo = dbMemberSearch.SelectRunNo(docyear, doctypecode);
					
					if(chkDocNo.equals("")) chkDocNo = "0000000";
					if(Integer.parseInt(chkDocNo)<=Integer.parseInt(chkRunDocNo)&&!chkDocNo.equals("0000000")){
						 
						 studentName = dbMemberSearch.SelectStudent(docNo, docyear);
						 request.setAttribute("studentName", studentName);
						 request.setAttribute("docNo", docNo);
						 request.setAttribute("docyear", docyear);
						 request.setAttribute("docmonth", docmonth);
						 
						 forwardText = "print";
						 return mapping.findForward(forwardText);
				 
				 } else if(Integer.parseInt(docNo)>=Integer.parseInt(chkRunDocNo)&&request.getParameterValues("oldMatCode")==null){
						alertMessage = "ยังไม่ได้เลือกสินค้า";
						memberSearchForm.setStudentName(studentName);
						request.setAttribute("alertMessage", alertMessage);
						forwardText = "result";
						 return mapping.findForward(forwardText);
				} else if(Integer.parseInt(docNo)>Integer.parseInt(chkRunDocNo)&&request.getParameterValues("oldMatCode")!=null){
					alertMessage = "2";
					memberSearchForm.setStudentName(studentName);
					request.setAttribute("alertMessage", alertMessage);
					forwardText = "result";
					 return mapping.findForward(forwardText);
				}
					else if(Integer.parseInt(docNo)==Integer.parseInt(chkRunDocNo)&&request.getParameterValues("oldMatCode")!=null){
			 
					String nowDate = dateUtil.CnvToYYYYMMDD(dateUtil.curDate(), '/');
					
					dbMemberSearch.Additemhd(doctypecode, docyear, docmonth, docNo, studentName, studentClass, semesterNo, loginId, userName, nowDate, docStatus, totpay, totbalance);	
					dbMemberSearch.SelectRequestno(docyear, doctypecode);	
					
					 if(request.getParameterValues("oldMatCode")!=null){
							String[] hdrecno 		= 	request.getParameterValues("hdrecno");
							String[] oldMatCode		=	request.getParameterValues("oldMatCode");
							String[] oldMatName		=	request.getParameterValues("oldMatName");
							String[] oldquantity	=	request.getParameterValues("oldquantity");
							String[] oldamount		=	request.getParameterValues("oldamount");
							String[] oldtotalamount	=	request.getParameterValues("oldtotalamount");
							String[] oldMatTypeCode	=	request.getParameterValues("oldMatTypeCode");
							String[] oldMatGrpCode	=	request.getParameterValues("oldMatGrpCode");
							String[] oldSerial 		= 	request.getParameterValues("oldSerial");
							String[] oldRefmatcode 	= 	request.getParameterValues("oldRefmatcode");
						 // write detail  record 
						for (int x=0;x<hdrecno.length ;x++ ){
							
							alertMessage = st.issue(oldMatCode[x], Float.parseFloat(oldquantity[x]));
							
						dbMemberSearch.Additemdt(doctypecode, docyear, docNo, hdrecno[x],oldSerial[x] ,oldMatCode[x], new String (oldMatName[x].getBytes("ISO8859_1"),"utf-8"), 
								oldMatTypeCode[x], oldMatGrpCode[x], Float.parseFloat(oldquantity[x]), Float.parseFloat(oldamount[x]), Float.parseFloat(oldtotalamount[x]), dateTime,oldRefmatcode[x]);
					 }
				}
					 /*String semesterNoChk = dbMemberSearch.SelectSemesterNo();
					 if(semesterNo!=semesterNoChk){
						 dbMemberSearch.UpdateSemesterNo(semesterNo);
					 }*/
					 
					 request.setAttribute("studentName", studentName);
					 request.setAttribute("docNo", docNo);
					 request.setAttribute("docyear", docyear);
					 request.setAttribute("docmonth", docmonth);
					 
					 forwardText = "print";
					 return mapping.findForward(forwardText);
				}
					else if(Integer.parseInt(chkDocNo)<Integer.parseInt(chkRunDocNo+1)&&chkDocNo.equals("0000000")) {
						alertMessage = "3";
						memberSearchForm.setStudentName(studentName);
						request.setAttribute("alertMessage", alertMessage);
						forwardText = "result";
						 return mapping.findForward(forwardText);
					}	
		}
				if(delete!=null){	
					memberSearchForm.setMatcode("");
					String studentName		= 	new String(memberSearchForm.getStudentName().getBytes("ISO8859_1"),"utf-8"); // à¸Šà¸·à¹ˆà¸­-à¸™à¸²à¸¡à¸ªà¸�à¸¸à¸¥à¸™à¸±à¸�à¹€à¸£à¸µà¸¢à¸™
					int recno 				=  memberSearchForm.getRecno();	
					float sumamount = 0f;
					// add old record
					 if(request.getParameterValues("oldMatCode")!=null){
						// 	String[] hdrecno		=	request.getParameterValues("hdrecno");
							String[] oldMatCode		=	request.getParameterValues("oldMatCode");
							String[] oldMatName		=	request.getParameterValues("oldMatName");
							String[] oldquantity	=	request.getParameterValues("oldquantity");
							String[] oldamount		=	request.getParameterValues("oldamount");
							String[] oldtotalamount	=	request.getParameterValues("oldtotalamount");
							String[] oldMatTypeCode	=	request.getParameterValues("oldMatTypeCode");
							String[] oldMatGrpCode	=	request.getParameterValues("oldMatGrpCode");
						 int x = 0;
						 int i = 0;
						for ( x=0;x<oldMatCode.length ;x++ ){
							MemberSearchForm olditem = new MemberSearchForm();
							
							olditem.setHdrecno(i);
							if (x==(recno-1) ){	
								 
							}else{
							    // old record
						//		olditem.setHdrecno(Integer.parseInt(hdrecno[x]));
								olditem.setMatcode(oldMatCode[x]);
								olditem.setMatname(new String (oldMatName[x].getBytes("ISO8859_1"),"utf-8"));
								olditem.setQty(oldquantity[x]);
								olditem.setAmount(Float.parseFloat(oldamount[x]));
								olditem.setTotalamount(Float.parseFloat(oldtotalamount[x]));
								olditem.setMatTypeCode(oldMatTypeCode[x]);
								olditem.setMatGrpCode(oldMatGrpCode[x]);
								
								sumamount=sumamount+Float.parseFloat(oldtotalamount[x]);
								
								itemlist.add(olditem);
							
							}
						}
					 } 
					 	memberSearchForm.setStudentName(studentName);
					 	memberSearchForm.setQty("1");
						memberSearchForm.setSumamount(sumamount);
						request.setAttribute("itemlist", itemlist);
				}
				if(chk!=null){	
					
					String studentID = memberSearchForm.getStudentID();
					String studentName = ""; 
					String studentClass = "";
					String textBoxId = "print";
					
					conn = agent.getConnectMYSql();
					
					String sqlStmt1 = "SELECT * FROM masterstudent WHERE studentid = '"+studentID+"' AND ";
					sqlStmt1 = sqlStmt1 + "studentid <> '' ORDER BY studentid " ;
					
					//System.out.println(sqlStmt);				
					pStmt = conn.createStatement();
					rs = pStmt.executeQuery(sqlStmt1);			
					while (rs.next()) {
						studentID		= rs.getString("studentid");
						studentName		= rs.getString("studentname");
						studentClass	= rs.getString("studentclass");
		//				costCode = matCode.substring(0, 3);
					}
					rs.close();
					pStmt.close();
					conn.close();
					
					// data old
					int i = 0;
						if(request.getParameterValues("oldMatCode")!=null){
							String[] oldMatCode		=	request.getParameterValues("oldMatCode");
							String[] oldMatName		=	request.getParameterValues("oldMatName");
							String[] oldquantity	=	request.getParameterValues("oldquantity");
							String[] oldamount		=	request.getParameterValues("oldamount");
							String[] oldtotalamount	=	request.getParameterValues("oldtotalamount");
							String[] oldMatTypeCode	=	request.getParameterValues("oldMatTypeCode");
							String[] oldMatGrpCode	=	request.getParameterValues("oldMatGrpCode");
							
							for(int x=0; x<oldMatCode.length; x++){
								MemberSearchForm olditem = new MemberSearchForm();
								i=i+1;
							 
								olditem.setMatcode(oldMatCode[x]);
								olditem.setMatname(new String (oldMatName[x].getBytes("ISO8859_1"),"utf-8"));
								olditem.setQty(oldquantity[x]);
								olditem.setAmount(Float.parseFloat(oldamount[x]));
								olditem.setTotalamount(Float.parseFloat(oldtotalamount[x]));
								olditem.setMatTypeCode(oldMatTypeCode[x]);
								olditem.setMatGrpCode(oldMatGrpCode[x]);
						//		sumamount = sumamount+Float.parseFloat(oldtotalamount[x]) ;
								itemlist.add(olditem);
							}
						}
						request.setAttribute("itemlist", itemlist);
						request.setAttribute("textBoxId", textBoxId);
						memberSearchForm.setStudentID(studentID);
						memberSearchForm.setStudentName(studentName);
						memberSearchForm.setStudentClass(studentClass);
				//	forwardText = "success";
				}
				if(save!=null){
					memberSearchForm.setMatcode("");
				    String sysdate          = memberSearchForm.getSysdate();
					String doctypecode		=	"SEL";
					String docyear			=	Integer.toString((Integer.parseInt(sysdate.substring(6,10))+543));
					String docmonth			=	sysdate.substring(3,5);
					String docNo			=	memberSearchForm.getRequestNo(); //à¸£à¸«à¸±à¸ªà¹€à¸­à¸�à¸ªà¸²à¸£
					String studentName		= 	new String(memberSearchForm.getStudentName().getBytes("ISO8859_1"),"utf-8"); // à¸Šà¸·à¹ˆà¸­-à¸™à¸²à¸¡à¸ªà¸�à¸¸à¸¥à¸™à¸±à¸�à¹€à¸£à¸µà¸¢à¸™
					String studentClass		=	new String(memberSearchForm.getStudentClass().getBytes("ISO8859_1"),"utf-8"); 
			//			String cardid			=   memberSearchForm.getCardid(); //à¸£à¸«à¸±à¸ªà¸šà¸±à¸•à¸£à¸™à¸±à¸�à¹€à¸£à¸µà¸¢à¸™
					float totpay			= 	memberSearchForm.getTotpay(); //à¸ˆà¹ˆà¸²à¸¢
					float totbalance		= 	memberSearchForm.getTotbalance(); 	//à¸—à¸­à¸™
					String docStatus 		= "AC";
					String semesterNo	= memberSearchForm.getSemesterNo();
					//update Quantity
					String alertMessage     = 	"";
					
				    // write header record
					DBMemberSearch dbMemberSearch = new DBMemberSearch();
					Stock st = new Stock();
					DateUtil dateUtil = new DateUtil();	
					String dateTime = dateUtil.curDateTime();
					
					String chkDocNo = dbMemberSearch.SelectDocNo(docNo, docyear);
					String chkRunDocNo = dbMemberSearch.SelectRunNo(docyear, doctypecode);
					
					if(chkDocNo.equals("")) chkDocNo = "0000000";
				 if(Integer.parseInt(docNo)>=Integer.parseInt(chkRunDocNo)&&request.getParameterValues("oldMatCode")==null){
						alertMessage = "à¸¢à¸±à¸‡à¹„à¸¡à¹ˆà¸¡à¸µà¸�à¸²à¸£à¸—à¸³à¸£à¸²à¸¢à¸�à¸²à¸£";
						memberSearchForm.setStudentName(studentName);
						request.setAttribute("alertMessage", alertMessage);
						forwardText = "result";
						 return mapping.findForward(forwardText);
				} else if(Integer.parseInt(docNo)>Integer.parseInt(chkRunDocNo)&&request.getParameterValues("oldMatCode")!=null){
					alertMessage = "à¹€à¸¥à¸‚à¸—à¸µà¹ˆà¹€à¸­à¸�à¸ªà¸²à¸£à¹„à¸¡à¹ˆà¸•à¸£à¸‡à¸�à¸±à¸šà¸�à¸²à¸£à¸—à¸³à¸‡à¸²à¸™";
					memberSearchForm.setStudentName(studentName);
					request.setAttribute("alertMessage", alertMessage);
					forwardText = "result";
					 return mapping.findForward(forwardText);
				}
					else if(Integer.parseInt(docNo)==Integer.parseInt(chkRunDocNo)&&request.getParameterValues("oldMatCode")!=null){
					//à¸§à¸±à¸™à¸—à¸µà¹ˆà¸—à¸³à¹€à¸­à¸�à¸ªà¸²à¸£
					String nowDate = dateUtil.CnvToYYYYMMDD(dateUtil.curDate(), '/');
					
					dbMemberSearch.Additemhd(doctypecode, docyear, docmonth, docNo, studentName, studentClass, semesterNo, loginId, userName, nowDate, docStatus, totpay, totbalance);	
					dbMemberSearch.SelectRequestno(docyear, doctypecode);	
					
					 if(request.getParameterValues("oldMatCode")!=null){
							String[] hdrecno 		= 	request.getParameterValues("hdrecno");
							String[] oldMatCode		=	request.getParameterValues("oldMatCode");
							String[] oldMatName		=	request.getParameterValues("oldMatName");
							String[] oldquantity	=	request.getParameterValues("oldquantity");
							String[] oldamount		=	request.getParameterValues("oldamount");
							String[] oldtotalamount	=	request.getParameterValues("oldtotalamount");
							String[] oldMatTypeCode	=	request.getParameterValues("oldMatTypeCode");
							String[] oldMatGrpCode	=	request.getParameterValues("oldMatGrpCode");
							String[] oldSerial 		= 	request.getParameterValues("oldSerial");
							String[] oldRefmatcode 		= 	request.getParameterValues("oldRefmatcode");
						 // write detail  record 
						for (int x=0;x<hdrecno.length ;x++ ){
							
							alertMessage = st.issue(oldMatCode[x], Float.parseFloat(oldquantity[x]));
							
						dbMemberSearch.Additemdt(doctypecode, docyear, docNo, hdrecno[x],oldSerial[x], oldMatCode[x], new String (oldMatName[x].getBytes("ISO8859_1"),"utf-8"), 
								oldMatTypeCode[x], oldMatGrpCode[x], Float.parseFloat(oldquantity[x]), Float.parseFloat(oldamount[x]), Float.parseFloat(oldtotalamount[x]), dateTime,oldRefmatcode[x]);
					 }
				}
					 /*String semesterNoChk = dbMemberSearch.SelectSemesterNo();
					 if(semesterNo!=semesterNoChk){
						 dbMemberSearch.UpdateSemesterNo(semesterNo);
					 }*/
					 
						memberSearchForm.initial();
						alertMessage = "Complete";
						
						String requestNo = "";
						String docTypeCode = "SEL";
						requestNo = dbMemberSearch.SelectRequestnoView(requestNo, docTypeCode, docyear);
						
						memberSearchForm.setRequestNo(requestNo);
					 request.setAttribute("alertMessage", alertMessage);
					 forwardText = "result";
					 return mapping.findForward(forwardText);
				}
					else if(Integer.parseInt(chkDocNo)<Integer.parseInt(chkRunDocNo+1)&&chkDocNo.equals("0000000")) {
						alertMessage = "à¹„à¸¡à¹ˆà¸žà¸šà¸£à¸²à¸¢à¸�à¸²à¸£à¸™à¸µà¹‰";
						memberSearchForm.setStudentName(studentName);
						request.setAttribute("alertMessage", alertMessage);
						forwardText = "result";
						 return mapping.findForward(forwardText);
					}	
		}	
				
				 
			request.setAttribute("MemberSearchForm",memberSearchForm);				
				forwardText = "result";
				
		}
			catch (Exception e) {
		       throw new Exception(e.getMessage());
			}
		if(billpayment != null){
			ChoosetypeForm ctf =new ChoosetypeForm();
			String studentID = memberSearchForm.getStudentID();
			session.setAttribute("phone_num", studentID);
			forwardText = "billpayment";
		}
		return mapping.findForward(forwardText);
		}
}