/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.inventory.action;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.admin.data.DBMasterTable;
import com.dtac.inventory.data.DBMaterial;
import com.dtac.inventory.data.DBMaterialType;
import com.dtac.inventory.data.ImportExcel;
import com.dtac.inventory.form.MaterialForm;
 
/** 
 * MyEclipse Struts
 * Creation date: 22-04-2012
 */
public class MaterialAddNewAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();		
		map.put("materialform.button.adddata",	"adddata");		
		map.put("materialform.button.cancel",	"cancel");
		map.put("materialform.button.excel",	"excel");
		return map;
	}

	public ActionForward cancel(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //13-04-2012
		String forwardText 	= "success";
		String loginId 		= "";
		String appCode  	= "mm23";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			MaterialForm materialForm = (MaterialForm) form;			
			String matTypeCode	= materialForm.getMatTypeCode();
			
			DBMaterialType dbMaterialType = new DBMaterialType();
			List matTypeList = dbMaterialType.GetMaterialTypeList("");
			if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);

			List matGrpList = dbMaterialType.GetMaterialGrpList(matTypeCode, "", "AC");
			if (matGrpList.size() > 0 && !matTypeCode.equals("")) request.setAttribute("matGrpList", matGrpList);

			DBMaterial dbMaterial = new DBMaterial();
			List materialList = dbMaterial.GetMaterialList("", "", "","", matTypeCode, "", "", "", "", "", "", "AC");
			if (materialList.size() > 0) request.setAttribute("materialList", materialList);

			DBMasterTable dbMasterTable = new DBMasterTable();
			List unitList = dbMasterTable.GetMasterTableDTList("unit", "", "", "AC");
			if (unitList.size() > 0) request.setAttribute("unitList", unitList);
		
			List brandList = dbMasterTable.GetMasterTableDTList("bran", "", "", "AC");
			if (brandList.size() > 0) request.setAttribute("brandList", brandList);
			
			List colorList = dbMasterTable.GetMasterTableDTList("colo", "", "", "AC");
			if (colorList.size() > 0) request.setAttribute("colorList", colorList);
			
			List stuffList = dbMasterTable.GetMasterTableDTList("stuf", "", "", "AC");
			if (stuffList.size() > 0) request.setAttribute("stuffList", stuffList);
			
			List sizeList = dbMasterTable.GetMasterTableDTList("size", "", "", "AC");
			if (sizeList.size() > 0) request.setAttribute("sizeList", sizeList);
			
			materialForm.initial();
			materialForm.setMatTypeCode(matTypeCode);						
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward adddata(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //12-07-2012
		String forwardText 	= "success";
		String loginId 		= "";
		String appCode  	= "mm23";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
       			
			MaterialForm materialForm = (MaterialForm) form;			
			String matCode		= materialForm.getMatCode().toUpperCase();
			String serial 		= materialForm.getSerial();
			String matSendName	= new String(materialForm.getMatSendName().getBytes("ISO8859_1"),"utf-8");  materialForm.setMatSendName(matSendName);
			String matName		= new String(materialForm.getMatName().getBytes("ISO8859_1"),"utf-8");
			String matSearchName= new String(materialForm.getMatSearchName().getBytes("ISO8859_1"),"utf-8");
			String pUnit 		= materialForm.getpUnit();
			String rUnit 		= materialForm.getrUnit();
			String iUnit 		= materialForm.getiUnit();
			String matTypeCode	= materialForm.getMatTypeCode();
			String matGrpCode	= materialForm.getMatGrpCode(); if (matGrpCode == null) matGrpCode = "";
			String matRemark 	= new String(materialForm.getMatRemark().getBytes("ISO8859_1"),"utf-8");
			String matBrandCode	= materialForm.getMatBrandCode();
			String matSupplCode = new String(materialForm.getMatSupplCode().getBytes("ISO8859_1"),"utf-8");
			String matSupplName = new String(materialForm.getMatSupplName().getBytes("ISO8859_1"),"utf-8");
			String matColorCode = materialForm.getMatColorCode();
			String matStuffCode	= materialForm.getMatStuffCode();
			String refMatCode	= new String(materialForm.getRefMatCode().getBytes("ISO8859_1"),"utf-8");
			String qtyMaxStock	= materialForm.getQtyMaxStock();
			String qtyMinStock	= materialForm.getQtyMinStock();
			String alertMessage = "";
			String normalPrice = materialForm.getNormalPrice();
			String empPrice = materialForm.getEmpPrice();
			String vipPrice = materialForm.getVipPrice();
			String costPrice = materialForm.getCostPrice();
			String specialPrice = materialForm.getSpecialPrice();
			String stock1 = materialForm.getStock1();
			String stock2 = materialForm.getStock2();
			String rop = materialForm.getRop();
			
			DBMaterial dbMaterial = new DBMaterial();
		//	DBVender dbVender = new DBVender(); 
			
			
			/*
			if (qtyMinStock.equals("")) qtyMinStock = "0";
			if (qtyMaxStock.equals("")) qtyMaxStock = "0";
			if (matCode.equals("")) alertMessage = "กรุณาใส่รหัสสินค้า";
			else if (matName.equals("")) alertMessage = "กรุณาใส่ชื่อสินค้า";
		//	else if (matName.contains("\"") || matName.contains("'")) alertMessage = "";
			
			else if (matGrpCode.equals("")) alertMessage = "กรุณาเลือก Category";
			
			else if (dbMaterial.CheckMaterial(matCode)) alertMessage = "กรุณาเช็ครหัสสินค้า";
			
		//	else if (dbMaterial.CheckRefMatCode(matCode, refMatCode)) alertMessage = "à¸žà¸šà¸£à¸«à¸±à¸ªà¸ªà¸´à¸™à¸„à¹‰à¸²à¸­à¹‰à¸²à¸‡à¸­à¸´à¸‡à¸™à¸µà¹‰à¹�à¸¥à¹‰à¸§";
			
		//	else if (!dbVender.CheckVender(matSupplCode)) alertMessage = "à¹„à¸¡à¹ˆà¸žà¸šà¸£à¸«à¸±à¸ªà¸œà¸¹à¹‰à¸‚à¸²à¸¢à¸™à¸µà¹‰";
			
			if (alertMessage.equals("")) 
			{
				dbMaterial.AddMaterial(matCode, serial, matSendName, matName, matSearchName, pUnit, rUnit, iUnit, matTypeCode, matGrpCode, matRemark, 
						matBrandCode, matSupplCode, matColorCode, matStuffCode, refMatCode, qtyMaxStock, qtyMinStock, stock1, stock2, normalPrice, 
						empPrice, vipPrice, costPrice, specialPrice, rop);
				
				List materialList = dbMaterial.GetMaterial(matCode); 
				if (materialList.size() > 0) request.setAttribute("materialList", materialList);
				
				materialForm.initial();
				materialForm.setMatTypeCode(matTypeCode);
				
			} else {
				forwardText = "repeat";
				request.setAttribute("alertMessage", alertMessage);
				
				materialForm.setMatName(matName);
				materialForm.setMatSearchName(matSearchName);
				materialForm.setMatSupplCode(matSupplCode);
				materialForm.setMatSupplName(matSupplName);
				materialForm.setMatRemark(matRemark);
				
				DBMasterTable dbMasterTable = new DBMasterTable();
				List unitList = dbMasterTable.GetMasterTableDTList("unit", "", "", "AC");
				if (unitList.size() > 0) request.setAttribute("unitList", unitList);
			
				List brandList = dbMasterTable.GetMasterTableDTList("bran", "", "", "AC");
				if (brandList.size() > 0) request.setAttribute("brandList", brandList);
				
				List colorList = dbMasterTable.GetMasterTableDTList("colo", "", "", "AC");
				if (colorList.size() > 0) request.setAttribute("colorList", colorList);
				
				List stuffList = dbMasterTable.GetMasterTableDTList("stuf", "", "", "AC");
				if (stuffList.size() > 0) request.setAttribute("stuffList", stuffList);
				
				List sizeList = dbMasterTable.GetMasterTableDTList("size", "", "", "AC");
				if (sizeList.size() > 0) request.setAttribute("sizeList", sizeList);
				
			}*/

			DBMaterialType dbMaterialType = new DBMaterialType();
			List matTypeList = dbMaterialType.GetMaterialTypeList("");
			if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);

			List matGrpList = dbMaterialType.GetMaterialGrpList(matTypeCode, "", "AC");
			if (matGrpList.size() > 0 && !matTypeCode.equals("")) request.setAttribute("matGrpList", matGrpList);
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward excel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
		throws Exception { //12-07-2012
			String forwardText 	= "importexcel";
			String loginId 		= "";
			String appCode  	= "mm23";
			try {
				HttpSession session = request.getSession();
				if (session.isNew()) {
					session.invalidate();
					request.setAttribute("alertMessage","Session Timeout. Login again.");
					return mapping.findForward("relogin");
				} else {
					loginId = (String) session.getAttribute("loginId");
					if (loginId == null) {
						request.setAttribute("alertMessage","Please Login.");
						return mapping.findForward("relogin");
					}
				}
				DBLogin dbLogin = new DBLogin();			
				if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
					request.setAttribute("alertMessage","You don't have authorize.");
					return mapping.findForward("alertmsg");
				}
	       			
				MaterialForm materialForm = (MaterialForm) form;			
				String impEx	= materialForm.getImpEx();
				String matTypeCode = materialForm.getMatTypeCode();
				String alertMessage = "";
				
				ImportExcel importExcel = new ImportExcel();
				importExcel.ImportExcel("C:\\"+impEx);

			
					DBMasterTable dbMasterTable = new DBMasterTable();
					List unitList = dbMasterTable.GetMasterTableDTList("unit", "", "", "AC");
					if (unitList.size() > 0) request.setAttribute("unitList", unitList);
				
					List brandList = dbMasterTable.GetMasterTableDTList("bran", "", "", "AC");
					if (brandList.size() > 0) request.setAttribute("brandList", brandList);
					
					List colorList = dbMasterTable.GetMasterTableDTList("colo", "", "", "AC");
					if (colorList.size() > 0) request.setAttribute("colorList", colorList);
					
					List stuffList = dbMasterTable.GetMasterTableDTList("stuf", "", "", "AC");
					if (stuffList.size() > 0) request.setAttribute("stuffList", stuffList);
					
					List sizeList = dbMasterTable.GetMasterTableDTList("size", "", "", "AC");
					if (sizeList.size() > 0) request.setAttribute("sizeList", sizeList);
					
					DBMaterialType dbMaterialType = new DBMaterialType();
					List matTypeList = dbMaterialType.GetMaterialTypeList("");
					if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);

					List matGrpList = dbMaterialType.GetMaterialGrpList(matTypeCode, "", "AC");
					if (matGrpList.size() > 0 && !matTypeCode.equals("")) request.setAttribute("matGrpList", matGrpList);
					
					
					if (impEx.equals("")) {
						
					} else {
						alertMessage =  "Import Success";
					}
					request.setAttribute("alertMessage", alertMessage);
				
			} catch (Exception e) {
				throw new Exception(e.getMessage());
			}
			return  mapping.findForward(forwardText);
		}
	
}