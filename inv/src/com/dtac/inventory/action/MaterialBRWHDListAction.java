/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.inventory.action;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.admin.data.DBMasterTable;
import com.dtac.admin.data.DBMonth;
import com.dtac.admin.data.DBYear;
import com.dtac.inventory.data.DBMatDocType;
import com.dtac.inventory.data.DBMaterial;
 
import com.dtac.inventory.data.DBMaterialTake;
import com.dtac.inventory.data.DBMaterialType;
 
import com.dtac.inventory.data.DBMaterialTrans;
import com.dtac.inventory.data.DBWahoLocation;
import com.dtac.inventory.data.DBWarehouse;
import com.dtac.inventory.data.DBWarehouseAuth;
import com.dtac.inventory.form.MaterialBrowForm;
import com.dtac.inventory.form.MaterialForm;
import com.dtac.inventory.form.MaterialRetuForm;
import com.dtac.inventory.form.MaterialTakeForm;
import com.dtac.inventory.form.WarehouseForm;
import com.dtac.utils.DateUtil;
/** 
 * MyEclipse Struts
 * Creation date: 12-04-2012
 */
public class MaterialBRWHDListAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();		
		/*map.put("materialtakeform.button.add",	"adddata");
		map.put("materialtakeform.button.save",	"save");
		map.put("materialtakeform.button.update",	"update");
		map.put("materialtakeform.button.delete",	"delete");*/
	 
		map.put("materialtakeform.button.view",	"view");
		map.put("materialtakeform.button.search",	"search");
		map.put("materialtakeform.button.adddata",	"adddata");
		
		return map;
	}
  // start search
	public ActionForward search(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
		throws Exception { //09-10-2012
			String forwardText 	= "success";
			String loginId 		= "";
			String userName 		= "";
			String appCode  	= "mm42";
			try {
				HttpSession session = request.getSession();
				if (session.isNew()) {
					session.invalidate();
					request.setAttribute("alertMessage","Session Timeout. Login again.");
					return mapping.findForward("relogin");
				} else {
					loginId = (String) session.getAttribute("loginId");
				 
					userName= (String) session.getAttribute("userName");
					if (loginId == null) {
						request.setAttribute("alertMessage","Please Login.");
						return mapping.findForward("relogin");
					}
				}
				DBLogin dbLogin = new DBLogin();			
				if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
					request.setAttribute("alertMessage","You don't have authorize.");
					return mapping.findForward("alertmsg");
				}
				//Check Login
				MaterialTakeForm materialTakeForm = (MaterialTakeForm) form;					
				String docTypeCode	= materialTakeForm.getDocTypeCode();
				
				String docYear 		= materialTakeForm.getDocYear();
				String docMonth 	= materialTakeForm.getDocMonth();
				String custCode 	= new String(materialTakeForm.getVendCode().getBytes("ISO8859_1"),"utf-8");
				String custName 	= new String(materialTakeForm.getVendName().getBytes("ISO8859_1"),"utf-8");
			//	String custName 	=	materialTakeForm.getVendName();
				String docbycode = loginId;
				String docbyname = userName;
				String remark =""; 
				String alertMessage	= "";
				
				
				if (docTypeCode.equals("")) {
					forwardText = "success";
					alertMessage = "ระบุประเภทการรับ";
					
					DBMaterialTake dbMaterialTake = new DBMaterialTake();
					List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(docTypeCode, docYear, docMonth, "", "AC", "", "", "", custCode, custName);
					if (matTakeHDList.size() > 0) request.setAttribute("matTakeHDList", matTakeHDList);
					
				} else {
					DateUtil dateUtil = new DateUtil();
					String docDate = dateUtil.CnvToDDMMYYYYThaiYear(dateUtil.CnvToYYYYMMDD(dateUtil.curDate(), '/'));

				//	materialTakeForm.setDocNo("*****");
					materialTakeForm.setDate(docDate);
					request.setAttribute("docTypeCode", docTypeCode);
					session.setAttribute("docTypeCode", docTypeCode);
				}
				
				DBMatDocType dbMatDocType = new DBMatDocType();
				List matDocTypeList = dbMatDocType.GetMatDocTypeList("issu", "", "AC");
				if (matDocTypeList.size() > 0) request.setAttribute("matDocTypeList", matDocTypeList);
				
				DBYear dbYear 	= new DBYear();
				List yearList	= dbYear.GetYearList("", "");
				if (yearList.size() > 0) request.setAttribute("yearList", yearList);
				
				DBMonth dbMonth = new DBMonth();
				List monthList  = dbMonth.GetMonthList();
				if (monthList.size() > 0) request.setAttribute("monthList", monthList);
							
				DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();
				List warehouseAuth = dbWarehouseAuth.GetWarehouseAuth("", loginId, "AC");
				if (warehouseAuth.size() > 0) request.setAttribute("warehouseAuth", warehouseAuth);
				else {
					forwardText = "success";
					alertMessage = "คุณไม่มีสิทธิ์ทำงานคลังสินค้า";
				}
				
				DBMasterTable dbMasterTable = new DBMasterTable();
				List orderTypeList = dbMasterTable.GetMasterTableDTList("odty", "", "", "AC");
				if (orderTypeList.size() > 0) request.setAttribute("orderTypeList", orderTypeList);
				
				String docNo = "";
				
			//	DateUtil dateUtil = new DateUtil();
			//	String curDate = dateUtil.CnvToDDMMYYYYThaiYear(dateUtil.CnvToYYYYMMDD(dateUtil.curDate(), '/'));
				
				String docDate 		= materialTakeForm.getDate();
				String wahoCode		= materialTakeForm.getWahoCode();
				
				
				DBWarehouse getwhnme = new DBWarehouse();
				
				String wahoName     = getwhnme.GetWarehouseName(wahoCode);
				
					//docNo = dbMatDocNumber.GetLastDocNo(docTypeCode, docYear);
				DBMaterialTake dbMaterialTake = new DBMaterialTake();	
			// get running record new document
				
			//		docNo = dbMaterialTake.SelectDocno(docTypeCode, docYear);
			//		dbMaterialTake.AddMaterialTakeHD(docTypeCode, docNo, docYear, docMonth, docDate, docDate, "AC", loginId, userName,  "",  "",  
			//				"", "", wahoCode, "", "", "", "", "", "", "", "",  "",  
			//				"", "", "");
			
				
		//		List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(docTypeCode, docYear, docMonth, docNo, "", "", "", "", "", "");
		/*		//old record
				if (matTakeHDList.size() == 1) {
					request.setAttribute("matTakeHDList", matTakeHDList);
					MaterialTakeForm matTakeInfo = (MaterialTakeForm) matTakeHDList.get(0);
					
					materialTakeForm.setDocNo(docNo);
					materialTakeForm.setDocbycode(matTakeInfo.getDocbycode());
					materialTakeForm.setDocbyname(matTakeInfo.getDocbyname());
					materialTakeForm.setDate(matTakeInfo.getDate());
					materialTakeForm.setVendCode(matTakeInfo.getVendCode());
					materialTakeForm.setVendName(matTakeInfo.getVendName());
					materialTakeForm.setDocMonth(matTakeInfo.getDocMonth());
					//materialTakeForm.setDocStatus(matRetuInfo.getDocStatus());
					materialTakeForm.setWahoCode(matTakeInfo.getWahoCode());
					materialTakeForm.setRemark(matTakeInfo.getRemark());
					materialTakeForm.setItemNo("**");
					//materialRetuForm.setLotNo(matRetuInfo.getDocYear()+"-"+matRetuInfo.getDocMonth()+"-"+matRetuInfo.getDocDate().substring(0,2));
				 	materialTakeForm.setLotno(matTakeInfo.getLotDate());
					//materialTakeForm.setRefOrdTypeCode(matRetuInfo.getRefOrdTypeCode());
					//materialTakeForm.setRefOrdYear(matRetuInfo.getRefOrdYear());
					//materialTakeForm.setRefOrdNo(matRetuInfo.getRefOrdNo());
				
				//	wahoCode = matTakeInfo.getWahoCode();
				}else{
					// modify new record next year
				}
		*/		 
			
	//	OLD Record	to array list 
					  
				List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(docTypeCode, docYear, docMonth, "", "", "", "", "",custCode , "");		
					 					
					materialTakeForm.setDocNo(docNo);
					materialTakeForm.setVendName(custName);
					materialTakeForm.setDocTypeCode(docTypeCode);
					materialTakeForm.setDocbycode(docbycode);
					materialTakeForm.setDocbyname(docbyname);
					
					
					request.setAttribute("matTakeHDList", matTakeHDList);
					
		 
				request.setAttribute("alertMessage", alertMessage);
				
			} catch (Exception e) {
				throw new Exception(e.getMessage());
			}
			return  mapping.findForward(forwardText);
		}
	// end search
	// start add
	public ActionForward adddata(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
		throws Exception { //12-04-2012
			String forwardText 	= "adddata";
			String loginId 		= "";
			String userName		= "";
			String appCode  	= "mm42";
			try {
				HttpSession session = request.getSession();
				if (session.isNew()) {
					session.invalidate();
					request.setAttribute("alertMessage","Session Timeout. Login again.");
					return mapping.findForward("relogin");
				} else {
					loginId = (String) session.getAttribute("loginId");	
					userName= (String) session.getAttribute("userName");
					if (loginId == null) {
						request.setAttribute("alertMessage","Please Login.");
						return mapping.findForward("relogin");
					}
				}
				DBLogin dbLogin = new DBLogin();			
				if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
					request.setAttribute("alertMessage","You don't have authorize.");
					return mapping.findForward("alertmsg");
				}
	       			
				MaterialTakeForm materialTakeForm = (MaterialTakeForm) form;					
				String docTypeCode	= materialTakeForm.getDocTypeCode();
				
				String docYear 		= materialTakeForm.getDocYear();
				String docMonth 	= materialTakeForm.getDocMonth();
				String custCode 	= new String(materialTakeForm.getVendCode().getBytes("ISO8859_1"),"utf-8");
				String custName 	= new String(materialTakeForm.getVendName().getBytes("ISO8859_1"),"utf-8");
			//	String custName 	=	materialTakeForm.getVendName();
				String docbycode = loginId;
				String docbyname =userName;
				String remark =""; 
				String alertMessage	= "";
				
				
				if (docTypeCode.equals("")) {
					forwardText = "success";
					alertMessage = "ระบุประเภทการรับ";
					
					DBMaterialTake dbMaterialTake = new DBMaterialTake();
					List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(docTypeCode, docYear, docMonth, "", "AC", "", "", "", custCode, custName);
					if (matTakeHDList.size() > 0) request.setAttribute("matTakeHDList", matTakeHDList);
					
				} else {
					DateUtil dateUtil = new DateUtil();
					String docDate = dateUtil.CnvToDDMMYYYYThaiYear(dateUtil.CnvToYYYYMMDD(dateUtil.curDate(), '/'));

				//	materialTakeForm.setDocNo("*****");
					materialTakeForm.setDate(docDate);
					request.setAttribute("docTypeCode", docTypeCode);
					session.setAttribute("docTypeCode", docTypeCode);
				}
				
				DBMatDocType dbMatDocType = new DBMatDocType();
				List matDocTypeList = dbMatDocType.GetMatDocTypeList("issu", "", "AC");
				if (matDocTypeList.size() > 0) request.setAttribute("matDocTypeList", matDocTypeList);
				
				DBYear dbYear 	= new DBYear();
				List yearList	= dbYear.GetYearList("", "");
				if (yearList.size() > 0) request.setAttribute("yearList", yearList);
				
				DBMonth dbMonth = new DBMonth();
				List monthList  = dbMonth.GetMonthList();
				if (monthList.size() > 0) request.setAttribute("monthList", monthList);
							
				DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();
				List warehouseAuth = dbWarehouseAuth.GetWarehouseAuth("", loginId, "AC");
				if (warehouseAuth.size() > 0) request.setAttribute("warehouseAuth", warehouseAuth);
				else {
					forwardText = "success";
					alertMessage = "คุณไม่มีสิทธิ์ทำงานคลังสินค้า";
				}
				
				DBMasterTable dbMasterTable = new DBMasterTable();
				List orderTypeList = dbMasterTable.GetMasterTableDTList("odty", "", "", "AC");
				if (orderTypeList.size() > 0) request.setAttribute("orderTypeList", orderTypeList);
				
				String docNo = "";
				
			//	DateUtil dateUtil = new DateUtil();
			//	String curDate = dateUtil.CnvToDDMMYYYYThaiYear(dateUtil.CnvToYYYYMMDD(dateUtil.curDate(), '/'));
				
				String docDate 		= materialTakeForm.getDate();
				String wahoCode		= materialTakeForm.getWahoCode();
				
				
				DBWarehouse getwhnme = new DBWarehouse();
				
				String wahoName     = getwhnme.GetWarehouseName(wahoCode);
				
					//docNo = dbMatDocNumber.GetLastDocNo(docTypeCode, docYear);
				DBMaterialTake dbMaterialTake = new DBMaterialTake();	
			// get running record new document
				
					docNo = dbMaterialTake.SelectDocno(docTypeCode, docYear);
			//		dbMaterialTake.AddMaterialTakeHD(docTypeCode, docNo, docYear, docMonth, docDate, docDate, "AC", loginId, userName,  "",  "",  
			//				"", "", wahoCode, "", "", "", "", "", "", "", "",  "",  
			//				"", "", "");
			
				
		//		List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(docTypeCode, docYear, docMonth, docNo, "", "", "", "", "", "");
		/*		//old record
				if (matTakeHDList.size() == 1) {
					request.setAttribute("matTakeHDList", matTakeHDList);
					MaterialTakeForm matTakeInfo = (MaterialTakeForm) matTakeHDList.get(0);
					
					materialTakeForm.setDocNo(docNo);
					materialTakeForm.setDocbycode(matTakeInfo.getDocbycode());
					materialTakeForm.setDocbyname(matTakeInfo.getDocbyname());
					materialTakeForm.setDate(matTakeInfo.getDate());
					materialTakeForm.setVendCode(matTakeInfo.getVendCode());
					materialTakeForm.setVendName(matTakeInfo.getVendName());
					materialTakeForm.setDocMonth(matTakeInfo.getDocMonth());
					//materialTakeForm.setDocStatus(matRetuInfo.getDocStatus());
					materialTakeForm.setWahoCode(matTakeInfo.getWahoCode());
					materialTakeForm.setRemark(matTakeInfo.getRemark());
					materialTakeForm.setItemNo("**");
					//materialRetuForm.setLotNo(matRetuInfo.getDocYear()+"-"+matRetuInfo.getDocMonth()+"-"+matRetuInfo.getDocDate().substring(0,2));
				 	materialTakeForm.setLotno(matTakeInfo.getLotDate());
					//materialTakeForm.setRefOrdTypeCode(matRetuInfo.getRefOrdTypeCode());
					//materialTakeForm.setRefOrdYear(matRetuInfo.getRefOrdYear());
					//materialTakeForm.setRefOrdNo(matRetuInfo.getRefOrdNo());
				
				//	wahoCode = matTakeInfo.getWahoCode();
				}else{
					// modify new record next year
				}
		*/		 
			
	//	New Record	to array list 
					  
					
					List matTakeHDList = new ArrayList();
					matTakeHDList.add(new MaterialTakeForm("BW",docTypeCode, docYear, docMonth, docNo, docDate, "", "", docbycode, docbyname,
						"", "", "", "", "", "", "", "", "", "",
						"", "", "", wahoCode, wahoName, custCode, custName, remark, "AC"));
					
					materialTakeForm.setDocNo(docNo);
					materialTakeForm.setVendName(custName);
					materialTakeForm.setDocTypeCode(docTypeCode);
					materialTakeForm.setDocbycode(docbycode);
					materialTakeForm.setDocbyname(docbyname);
					
					
					request.setAttribute("matTakeHDList", matTakeHDList);
					
		 
				request.setAttribute("alertMessage", alertMessage);
			
			} catch (Exception e) {
				throw new Exception(e.getMessage());
			}
			return  mapping.findForward(forwardText);
		}
	
	// end add
	// start view
	public ActionForward view(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception { //23-07-2012
		String forwardText 	= "view";
		String loginId 		= "";
		String userName		= "";
		String appCode  	= "mm42";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");	
				userName= (String) session.getAttribute("userName");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
       			
			MaterialTakeForm materialTakeForm = (MaterialTakeForm) form;					
			String docTypeCode	= materialTakeForm.getDocTypeCode();
			
			String docYear 		= materialTakeForm.getDocYear();
			String docMonth 	= materialTakeForm.getDocMonth();
			String custCode 	= new String(materialTakeForm.getVendCode().getBytes("ISO8859_1"),"utf-8");
			String custName 	= new String(materialTakeForm.getVendName().getBytes("ISO8859_1"),"utf-8");
			String docNo 	=	materialTakeForm.getDocNo();
			String wahoCode = materialTakeForm.getWahoCode();
			String docbycode = loginId;
			String docbyname =userName;
			String remark =""; 
			String alertMessage	= "";
			
			
			if (docTypeCode.equals("")) {
				forwardText = "success";
				alertMessage = "ระบุประเภทการรับ";
				
				DBMaterialTake dbMaterialTake = new DBMaterialTake();
				List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(docTypeCode, docYear, docMonth, "", "AC", "", "", "", custCode, custName);
				if (matTakeHDList.size() > 0) request.setAttribute("matTakeHDList", matTakeHDList);
				
			} else {
				DateUtil dateUtil = new DateUtil();
				String docDate = dateUtil.CnvToDDMMYYYYThaiYear(dateUtil.CnvToYYYYMMDD(dateUtil.curDate(), '/'));

			//	materialTakeForm.setDocNo("*****");
				materialTakeForm.setDate(docDate);
				request.setAttribute("docTypeCode", docTypeCode);
				session.setAttribute("docTypeCode", docTypeCode);
			}
			
			DBMatDocType dbMatDocType = new DBMatDocType();
			List matDocTypeList = dbMatDocType.GetMatDocTypeList("issu", "", "AC");
			if (matDocTypeList.size() > 0) request.setAttribute("matDocTypeList", matDocTypeList);
			
			DBYear dbYear 	= new DBYear();
			List yearList	= dbYear.GetYearList("", "");
			if (yearList.size() > 0) request.setAttribute("yearList", yearList);
			
			DBMonth dbMonth = new DBMonth();
			List monthList  = dbMonth.GetMonthList();
			if (monthList.size() > 0) request.setAttribute("monthList", monthList);
						
			DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();
			List warehouseAuth = dbWarehouseAuth.GetWarehouseAuth("", loginId, "AC");
			if (warehouseAuth.size() > 0) request.setAttribute("warehouseAuth", warehouseAuth);
			else {
				forwardText = "success";
				alertMessage = "คุณไม่มีสิทธิ์ทำงานคลังสินค้า";
			}
			
			DBMasterTable dbMasterTable = new DBMasterTable();
			List orderTypeList = dbMasterTable.GetMasterTableDTList("odty", "", "", "AC");
			if (orderTypeList.size() > 0) request.setAttribute("orderTypeList", orderTypeList);
			
			 
			
		//	DateUtil dateUtil = new DateUtil();
		//	String curDate = dateUtil.CnvToDDMMYYYYThaiYear(dateUtil.CnvToYYYYMMDD(dateUtil.curDate(), '/'));
			
			String docDate 		= materialTakeForm.getDate();
		//	String wahoCode		= materialTakeForm.getWahoCode();
			
			
			DBWarehouse getwhnme = new DBWarehouse();
			
			String wahoName     = getwhnme.GetWarehouseName(wahoCode);
		 
			DBMaterialTrans getdtl = new DBMaterialTrans();	
	 
		
//	New Record	to array list 
				  
				
				List matTakeHDList = new ArrayList();
				matTakeHDList.add(new MaterialTakeForm("BW",docTypeCode, docYear, docMonth, docNo, docDate, "", "", docbycode, docbyname,
					"", "", "", "", "", "", "", "", "", "",
					"", "", "", wahoCode, wahoName, custCode, custName, remark, "AC"));
				
				//  old item list
				
		
							
			    
		//end add old record to list view
			List itemlist = getdtl.GetMaterialTakeDTList(custCode, docTypeCode, docYear, docMonth, docNo,"");
 		
					request.setAttribute("itemlist", itemlist);	
				
				//
				
				
				
				materialTakeForm.setDocNo(docNo);
				materialTakeForm.setVendName(custName);
				materialTakeForm.setDocTypeCode(docTypeCode);
				materialTakeForm.setDocbycode(docbycode);
				materialTakeForm.setDocbyname(docbyname);
				materialTakeForm.setWahoCode(wahoCode);
				
				
				request.setAttribute("matTakeHDList", matTakeHDList);
				
	 
			request.setAttribute("alertMessage", alertMessage);
			request.setAttribute("alertMessage", alertMessage);
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	
	//end view
}