/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.inventory.action;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.inventory.data.DBWarehouse;
import com.dtac.inventory.form.WarehouseForm;
/** 
 * MyEclipse Struts
 * Creation date: 26-04-2012
 */
public class WarehouseUpdateAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();
		map.put("warehouseform.button.cancel",  "cancel");
		map.put("warehouseform.button.update",  "update");
		return map;
	}
	public ActionForward cancel(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //12-04-2012
		String forwardText = "success";
		String loginId 		= "";
		String appCode  	= "mm22";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			WarehouseForm warehouseForm = (WarehouseForm) form;		
			warehouseForm.initial();
			
			DBWarehouse dbWarehouse = new DBWarehouse();							
			List warehouseList = dbWarehouse.GetWarehouseList("","", "");
			if (warehouseList.size() > 0) request.setAttribute("warehouseList", warehouseList);
		
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward update(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) 
	throws Exception {	//02-05-2012
		String forwardText 	= "success";
		String loginId 		= "";
		String appCode  	= "mm22";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			WarehouseForm warehouseForm = (WarehouseForm) form;
			String wahoCode	= warehouseForm.getWahoCode();
			String wahoName	= new String(warehouseForm.getWahoName().getBytes("ISO8859_1"),"utf-8");
			String wahoStatus = warehouseForm.getWahoStatus();
			
			DBWarehouse dbWarehouse = new DBWarehouse();
			if (wahoName.equals("")) {
				forwardText = "repeat"; 
				request.setAttribute("alertMessage", "กรอกชื่อคลังสินค้า");
				
			} else dbWarehouse.UpdateWarehouse(wahoCode, wahoName,wahoStatus);
			
			List warehouseList = dbWarehouse.GetWarehouseList("", "", "");
			if (warehouseList.size() > 0) request.setAttribute("warehouseList", warehouseList);
			
			warehouseForm.initial();			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
}