/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.inventory.action;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.admin.data.DBMasterTable;
import com.dtac.admin.data.DBMonth;
import com.dtac.admin.data.DBYear;
import com.dtac.inventory.data.DBMatDocType;
import com.dtac.inventory.data.DBMaterial;
import com.dtac.inventory.data.DBMaterialTake;
import com.dtac.inventory.data.DBMaterialTrans;
import com.dtac.inventory.data.DBMaterialType;
import com.dtac.inventory.data.DBWahoLocation;
import com.dtac.inventory.data.DBWarehouseAuth;
import com.dtac.inventory.form.MaterialTakeForm;
import com.dtac.utils.DateUtil;
import com.dtac.utils.HistoryMaterial;
import com.dtac.utils.Stock;
/** 
 * MyEclipse Struts
 * Creation date: 12-04-2012
 */
public class MaterialBRWListAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();		
		map.put("materialtakeform.button.add",	"adddata");
		map.put("materialtakeform.button.save",	"save");
		map.put("materialtakeform.button.update",	"update");
		map.put("materialtakeform.button.delete",	"delete");
		map.put("materialtakeform.button.print",	"print");
		map.put("materialform.button.search",	"search");
		
		return map;
	}
	
	///////
	public ActionForward adddata(ActionMapping mapping, ActionForm form, 
			HttpServletRequest request, HttpServletResponse response)
		throws Exception { //09-10-2012
		String forwardText = "success";
		String loginId 		= "";
		String loginName ="";
		String appCode  	= "mm42";
		
		//  verify user / password autirity 
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				loginName = (String) session.getAttribute("");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			
       	// read form  to variable	
			List<MaterialTakeForm> itemlist = new ArrayList<MaterialTakeForm>();
			List<MaterialTakeForm> itemlistnew = new ArrayList<MaterialTakeForm>();
			MaterialTakeForm materialTakeForm = (MaterialTakeForm) form;
			
			String docbycode = materialTakeForm.getDocbycode();
			String docbyname =materialTakeForm.getDocbyname();
			
			
			String doctypecode		= 	materialTakeForm.getDocTypeCode();
			String docyear		= 	materialTakeForm.getDocYear();
			String docmonth		= 	materialTakeForm.getDocMonth();
			String docno			=   materialTakeForm.getDocNo();
			//CUSTOMER CODE
			String cuscode	=   materialTakeForm.getVendCode();
			String alertMessage = "";	
			String serial = materialTakeForm.getMatStuffName();
			String matcode = materialTakeForm.getMatCode();
			String matname = materialTakeForm.getMatTypeName();	
			String docstatus = "IS";
			String docdate = materialTakeForm.getDate();
			String cvdocdate ="";
		    String stock	= "0";
		    String wahoCode	= "";
		    String itemno = "1";
			String priceperunit = "0";
			String issuamount = "";
			String issustatus = "AC";
			String status = "BW";
			 String chkdupMatcode ="";
			 String chkdupSerialno ="";
			 boolean duprec=false;
			
			DateUtil dt  = new DateUtil();
			cvdocdate= dt.CnvToYYYYMMDD(docdate, '/');
			String cusname = new String (materialTakeForm.getVendName().getBytes("ISO8859_1"),"utf-8");
			 
			String wahocode	= 	materialTakeForm.getWahoCode();
			
			int i=0;
		   
			
			DBMaterialTrans tbl = new DBMaterialTrans();
	
			 DBMaterial dbMaterial = new DBMaterial();	
	    
			 String issuqty = materialTakeForm.getTakequantity();  // จำนวนจ่ายออก
			 //Start check stock balance from stock master
			    matcode  =dbMaterial.getProcodeStock(serial);
				stock =	 dbMaterial.checkStock(matcode, serial, wahocode);
				 //	end check stock balance from stock master  	 
			//  check issue quantity is not null		 
	 
	//start add old record to list view
			    if(request.getParameterValues("oldMatCode")!=null){
		
						 String[] oldMatCode 		= request.getParameterValues("oldMatCode");
						 String[] oldMatStuffName 	= request.getParameterValues("oldMatStuffName"); // serial no
						 String[] categories 		= request.getParameterValues("categories");
						 String[] oldmatName 		= request.getParameterValues("oldMatName");
						 String[] quantity 			= request.getParameterValues("quantity");
						 String[] price 			= request.getParameterValues("price");
						 String[] amount 			= request.getParameterValues("amount");
						 String[] totalamount 		= request.getParameterValues("totalamount");
			
						
						 
						   
				for (int x=0;x<oldMatCode.length ;x++ ){
								MaterialTakeForm olditem = new MaterialTakeForm();
								i=i+1;
							    olditem.setStatus("BW");
								olditem.setMatCode(oldMatCode[x]);
						//		olditem.setMatTypeCode(oldMatTypeCode[x]);
						//		olditem.setMatTypeName(new String (oldMatTypeName[x].getBytes("ISO8859_1"),"utf-8"));
						//		olditem.setMatTypeName(oldMatTypeName[x]);
								olditem.setTakecategories(categories[x]);
						//		olditem.setMatGrpName(new String (oldMatGrpName[x].getBytes("ISO8859_1"),"utf-8"));
						//		olditem.setMatGrpName(oldMatGrpName[x]);
						//		olditem.setRefMatCode(oldrefMatCode[x]);
						//		olditem.setRefMatName(new String (oldrefMatName[x].getBytes("ISO8859_1"),"utf-8"));
						//		olditem.setRefMatName(oldrefMatName[x]);
								olditem.setMatName(new String (oldmatName[x].getBytes("ISO8859_1"),"utf-8"));
						//		olditem.setMatName(oldmatName[x]);
						//		olditem.setTakeunit(new String (unit[x].getBytes("ISO8859_1"),"utf-8"));
						//		olditem.setTakeunit(unit[x]);
						//		olditem.setrUnitName(new String (oldrUnitName[x].getBytes("ISO8859_1"),"utf-8"));
						//		olditem.setrUnitName(oldrUnitName[x]);
								olditem.setTakequantity(quantity[x]);
						//  	    olditem.setTakeprice(price[x]);
								olditem.setTakeamount(amount[x]);
								olditem.setTaketotalamount(totalamount[x]);
						//		olditem.setMatBrandCode(oldMatBrandCode[x]);
						//		olditem.setMatBrandName(new String (oldMatBrandName[x].getBytes("ISO8859_1"),"utf-8"));
						//		olditem.setMatBrandName(oldMatBrandName[x]);
						//		olditem.setMatColorCode(oldMatColorCode[x]);
						//		olditem.setMatColorName(new String (oldMatColorName[x].getBytes("ISO8859_1"),"utf-8"));
						//		olditem.setMatColorName(oldMatColorName[x]);
						//		olditem.setMatStuffCode(oldMatStuffCode[x]);
						//		olditem.setMatStuffName(new String (oldMatStuffName[x].getBytes("ISO8859_1"),"utf-8"));
								olditem.setMatStuffName(oldMatStuffName[x]);
						//		olditem.setNormalPrice(oldNormalPrice[x]);
						//		olditem.setEmpPrice(oldEmpPrice[x]);
						//		olditem.setCostPrice(oldCostPrice[x]);
						//		olditem.setSpecialPrice(oldSpecialPrice[x]);
						//		olditem.setVipPrice(oldVipPrice[x]);
						//		olditem.setStock1(oldStock1[x]);
						//		olditem.setStock2(oldStock2[x]);
								   chkdupMatcode =oldMatCode[x];
								   chkdupSerialno =oldMatStuffName[x];
								 
								if(chkdupMatcode.equals(matcode) & chkdupSerialno.equals(serial)){
								duprec=true;
								alertMessage = " dupplicate record serial no & product ";
							//	materialTakeForm.setMatTypeName(new String (matname.getBytes("ISO8859_1"),"utf-8"));
								request.setAttribute("alertMessage", alertMessage); 
				               }
								itemlist.add(olditem);
							}
			    } 
		//end add old record to list view
			    
			    
			 if(issuqty== ""||serial=="") {
				 
			if(issuqty== "") alertMessage = " quantity is not null ";
			if(serial== "") alertMessage = " serial no is not null ";		
					request.setAttribute("itemlist", itemlist);	
					request.setAttribute("alertMessage", alertMessage); 
			 }else {
		// check stock balance	 
			 if(Float.parseFloat(issuqty)>Float.parseFloat(stock) ){		
					
				 alertMessage = " can not issue from stock ";
				
				request.setAttribute("itemlist", itemlist);	
				request.setAttribute("alertMessage", alertMessage);
			 }else{
 //Start issue Stock 				 
				 
				 if(duprec==false) {
					  
						//========================= Insert Table Header ===============================
					 
						tbl.AddMaterialTranHD(status,doctypecode, docyear, docno, docmonth, cvdocdate, docstatus,cuscode, cusname, wahocode,docbycode,docbyname);
									
						//=========================================================================	 
				     wahoCode	= 	materialTakeForm.getWahoCode();
			    		    	 
					 String matTypeCode ="",matGrpCode ="", matColorCode ="", matStuffCode ="", refMatCode="", matStatus ="",
					 pUnit ="", matBrandCode ="",matSearchName="";
					 
				// get detail form master material serial and insert new record to itemlist 
				// to new list view 
					 
					 itemlistnew = dbMaterial.GetMaterialListSerial("BW",cuscode,matcode, matname, serial, matSearchName,
							matTypeCode, matGrpCode, matColorCode, matStuffCode, refMatCode, matStatus,
							pUnit, matBrandCode,issuqty) ; 
					 
					 int issueqty = Integer.parseInt(issuqty);
					 
				//Start  add a new record into list view JSP
					 itemlist.add(itemlistnew.get(0));
				//end	 
	//=================== Start Data Base Detail 		
					
			//Start get product code, serial from itemlist add new 
						MaterialTakeForm matTakeInfo = (MaterialTakeForm) itemlistnew.get(0);
						matcode= matTakeInfo.getMatCode();
						matname= matTakeInfo.getMatName();
					    issuamount = matTakeInfo.getPricesale();  // ราคาขาย
					    
		 //Start issue from stock master
		stock =	 dbMaterial.issueMaterial(matcode, serial, issueqty, wahocode);
		 //	end issue from stock master  
			 

			}	 			 
	 // add new record
				 
			 
			 	
			  
	 // new record insert to table detail
				
		 tbl.AddMaterialTranDT(status,doctypecode,cuscode,wahocode, docyear, docno,docmonth, cvdocdate, itemno, serial, matcode, matname, issuqty, priceperunit, issuamount, issustatus);	
    //=================== End Data Base Detail 			
			
			
		
// End issue Stock		 
			 
			 
			 }
	 }
			 request.setAttribute("itemlist", itemlist);
			 
			DBMatDocType dbMatDocType = new DBMatDocType();
			List matDocTypeList = dbMatDocType.GetMatDocTypeList("issu", "DEL", "AC");
			if (matDocTypeList.size() > 0) request.setAttribute("matDocTypeList", matDocTypeList);
				
			DBYear dbYear = new DBYear();
			List yearList = dbYear.GetYearList("","");
			if (yearList.size()>0) request.setAttribute("yearList", yearList);
							
			DBMonth dbMonth = new DBMonth();
			List monthList  = dbMonth.GetMonthList();
			if (monthList.size() > 0) request.setAttribute("monthList", monthList);
			 
			DBMaterialType dbMaterialType = new DBMaterialType();
			List matTypeList = dbMaterialType.GetMaterialTypeList("");
			if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);
			
			DBMaterialTake dbMaterialTake = new DBMaterialTake();
			List matCategorieList = dbMaterialTake.GetMaterialCategoriesList();
			if (matCategorieList.size() > 0) request.setAttribute("matCategorieList", matCategorieList);
			
			DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();
			List warehouseAuth = dbWarehouseAuth.GetWarehouseAuth("", loginId, "AC");
			if (warehouseAuth.size() > 0) request.setAttribute("warehouseAuth", warehouseAuth);
			
			DBMasterTable dbMasterTable = new DBMasterTable();
			List deptList = dbMasterTable.GetMasterTableDTList("dept", "", "", "AC");
			if (deptList.size() > 0) request.setAttribute("deptList", deptList);
			
			DBWahoLocation dbWahoLocation = new DBWahoLocation();		 	
			List locaList = dbWahoLocation.GetLocationList(wahoCode, "", "AC");
			if (locaList.size() > 0) request.setAttribute("locaList", locaList);
			
			// set Header 
			List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(doctypecode, docyear, "", docno, "", "", "", "", "", "");
			if (matTakeHDList.size() == 1) {
	
		//start old header jsp reflase
			//	materialTakeForm.setMatTypeName(new String (matname.getBytes("ISO8859_1"),"utf-8"));
				if(alertMessage.equals(" dupplicate record serial no & product ")|| 
						alertMessage.equals(" can not issue from stock ")|| 
						alertMessage.equals(" quantity is not null ")		
				){
				materialTakeForm.setMatTypeName(new String (matname.getBytes("ISO8859_1"),"utf-8"));
				}
				else{
				materialTakeForm.setMatTypeName(matname); }
				materialTakeForm.setVendName(cusname);
				materialTakeForm.setDocbycode(docbycode);
				materialTakeForm.setDocbyname(docbyname);
				
				if(wahocode.equals("A1")) materialTakeForm.setStock1(stock);
				if(wahocode.equals("B1")) materialTakeForm.setStock2(stock);
				if(wahocode.equals("C1")) materialTakeForm.setStock3(stock);
				if(wahocode.equals("D1")) materialTakeForm.setStock4(stock);
				
				 materialTakeForm.setMatStuffName("");
		//end
				
				
				request.setAttribute("matTakeHDList", matTakeHDList);
			      
		 
			}
 
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
		}
	//////
	public ActionForward save(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //12-05-2012
		String forwardText = "success";
		String loginId 		= "";
		String userName 	= "";
		String appCode  	= "mm42";
	 	String  doctypecode		=   "DEL";
	//	String  docyear			=   "";
	//	String  docmonth		=	"";
	//	String  docno			=   "";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				userName= (String) session.getAttribute("userName");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			
			MaterialTakeForm materialTakeForm = (MaterialTakeForm) form;
			String confirm      = materialTakeForm.getConfirm(); // confirm
			
			String lotno			=	materialTakeForm.getLotno();
			String locaCode			=   materialTakeForm.getLocaCode();
			String docyear			= 	materialTakeForm.getDocYear();
			String docmonth			= 	materialTakeForm.getDocMonth();
			String docno			=   materialTakeForm.getDocNo();
			String wahoCode 		= 	materialTakeForm.getWahoCode();
			//update Quantity
			String alertMessage     = 	"";
			
		    // write header record
			DBMaterialTake dbMaterialTake = new DBMaterialTake();
			
			DateUtil dateUtil = new DateUtil();	
			// current date
			String nowDate = dateUtil.CnvToDDMMYYYYThaiYear(dateUtil.CnvToYYYYMMDD(dateUtil.curDate(), '/'));
			
			Stock st = new Stock();
			HistoryMaterial his = new HistoryMaterial();
			
			 if(request.getParameterValues("oldMatCode")!=null){
				 String[] oldMatCode 		= request.getParameterValues("oldMatCode");
				 String[] hdrecno			= request.getParameterValues("hdrecno");
				 String[] oldMatTypeCode 	= request.getParameterValues("oldMatTypeCode");
				 String[] categories 		= request.getParameterValues("categories");
				 String[] oldrefMatCode 	= request.getParameterValues("oldrefMatCode");
				 String[] oldMatBrandCode 	= request.getParameterValues("oldMatBrandCode");
				 String[] oldMatColorCode 	= request.getParameterValues("oldMatColorCode");
				 String[] oldMatStuffCode 	= request.getParameterValues("oldMatStuffCode");
				 String[] oldMatName 		= request.getParameterValues("oldMatName");
				 String[] unit 				= request.getParameterValues("unit");
				 String[] quantity 			= request.getParameterValues("quantity");
				 String[] price 			= request.getParameterValues("price");
				 String[] amount 			= request.getParameterValues("amount");
				 String[] totalamount 		= request.getParameterValues("totalamount");
				
				 if (confirm.equals("Y")){
				 // write detail  record 
				for (int x=0;x<oldMatCode.length ;x++ ){
					 hdrecno[x] = dbMaterialTake.GetLastItemNoMaterialTakeDTList(doctypecode, docyear, docno);
					
					dbMaterialTake.AddMaterialTakeDT(doctypecode, docyear, docno, hdrecno[x], oldMatCode[x], new String (oldMatName[x].getBytes("ISO8859_1"),"utf-8"), oldMatTypeCode[x], categories[x], 
							lotno, locaCode, oldrefMatCode[x], oldMatStuffCode[x], oldMatBrandCode[x], oldMatColorCode[x], unit[x], price[x], quantity[x], amount[x], 
							totalamount[x]);
			
					 if(wahoCode.equals("A1")){
							alertMessage=	st.issueStock1(oldMatCode[x], quantity[x]);
						}else{
							alertMessage=	st.issueStock2(oldMatCode[x], quantity[x]);	
						}
					
					his.AddHistoryMaterial(oldMatCode[x], nowDate);
					request.setAttribute("alertMessage", alertMessage);
					
				}
				
				// reset record
				materialTakeForm.initial();
			 }
		}
			 List<MaterialTakeForm> itemlist = new ArrayList<MaterialTakeForm>();
			 
			 int i=0;
				// add old record
				 if(request.getParameterValues("oldMatCode")!=null){
					 String[] hdrecno 			= request.getParameterValues("hdrecno");
					 String[] oldMatCode 		= request.getParameterValues("oldMatCode");
					 String[] oldMatTypeCode 	= request.getParameterValues("oldMatTypeCode");
					 String[] oldMatTypeName 	= request.getParameterValues("oldMatTypeName");
					 String[] categories 		= request.getParameterValues("categories");
					 String[] oldMatGrpName		= request.getParameterValues("oldMatGrpName");
					 String[] oldrefMatCode 	= request.getParameterValues("oldrefMatCode");
					 String[] oldrefMatName		= request.getParameterValues("oldrefMatName");
					 String[] oldmatName 		= request.getParameterValues("oldMatName");
					 String[] unit 				= request.getParameterValues("unit");
					 String[] oldrUnitName		= request.getParameterValues("oldrUnitName");
					 String[] quantity 			= request.getParameterValues("quantity");
					 String[] price 			= request.getParameterValues("price");
					 String[] amount 			= request.getParameterValues("amount");
					 String[] totalamount 		= request.getParameterValues("totalamount");
					 String[] oldMatBrandCode 	= request.getParameterValues("oldMatBrandCode");
					 String[] oldMatBrandName 	= request.getParameterValues("oldMatBrandName");
					 String[] oldMatColorCode 	= request.getParameterValues("oldMatColorCode");
					 String[] oldMatColorName 	= request.getParameterValues("oldMatColorName");
					 String[] oldMatStuffCode 	= request.getParameterValues("oldMatStuffCode");
					 String[] oldMatStuffName 	= request.getParameterValues("oldMatStuffName");
					 String[] oldNormalPrice 	= request.getParameterValues("oldNormalPrice");
					 String[] oldEmpPrice 		= request.getParameterValues("oldEmpPrice");
					 String[] oldCostPrice 		= request.getParameterValues("oldCostPrice");
					 String[] oldSpecialPrice 	= request.getParameterValues("oldSpecialPrice");
					 String[] oldVipPrice 		= request.getParameterValues("oldVipPrice");
					 String[] oldStock1 		= request.getParameterValues("oldStock1");
					 String[] oldStock2 		= request.getParameterValues("oldStock2");
					 
					 
					for (int x=0;x<oldMatCode.length ;x++ ){
						MaterialTakeForm olditem = new MaterialTakeForm();
						i=i+1;
						olditem.setHdrecno(Integer.parseInt(hdrecno[x]));
						olditem.setMatCode(oldMatCode[x]);
						olditem.setMatTypeCode(oldMatTypeCode[x]);
						olditem.setMatTypeName(new String (oldMatTypeName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setTakecategories(categories[x]);
						olditem.setMatGrpName(new String (oldMatGrpName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setRefMatCode(oldrefMatCode[x]);
						olditem.setRefMatName(new String (oldrefMatName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setMatName(new String (oldmatName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setTakeunit(new String (unit[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setrUnitName(new String (oldrUnitName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setTakequantity(quantity[x]);
						olditem.setTakeprice(price[x]);
						olditem.setTakeamount(amount[x]);
						olditem.setTaketotalamount(totalamount[x]);
						olditem.setMatBrandCode(oldMatBrandCode[x]);
						olditem.setMatBrandName(new String (oldMatBrandName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setMatColorCode(oldMatColorCode[x]);
						olditem.setMatColorName(new String (oldMatColorName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setMatStuffCode(oldMatStuffCode[x]);
						olditem.setMatStuffName(new String (oldMatStuffName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setNormalPrice(oldNormalPrice[x]);
						olditem.setEmpPrice(oldEmpPrice[x]);
						olditem.setCostPrice(oldCostPrice[x]);
						olditem.setSpecialPrice(oldSpecialPrice[x]);
						olditem.setVipPrice(oldVipPrice[x]);
						olditem.setStock1(oldStock1[x]);
						olditem.setStock2(oldStock2[x]);
					 
						itemlist.add(olditem);
					}
					request.setAttribute("itemlist", itemlist);
					
				 }
				 String unit = materialTakeForm.getTakeunit();
				 unit = new String (unit.getBytes("ISO8859_1"),"utf-8");
				 materialTakeForm.setTakeunit(unit);
				 
				 String matName = materialTakeForm.getMatName();
				 matName = new String (matName.getBytes("ISO8859_1"),"utf-8");
				 materialTakeForm.setMatName(matName);
				 
				 String matBrandName = materialTakeForm.getMatBrandName();
				 matBrandName = new String (matBrandName.getBytes("ISO8859_1"),"utf-8");
				 materialTakeForm.setMatBrandName(matBrandName);
				 
				 String matColorName = materialTakeForm.getMatColorName();
				 matColorName = new String (matColorName.getBytes("ISO8859_1"),"utf-8");
				 materialTakeForm.setMatColorName(matColorName);
				 
				 String rUnitName = materialTakeForm.getrUnitName();
				 rUnitName = new String (rUnitName.getBytes("ISO8859_1"),"utf-8");
				 materialTakeForm.setrUnitName(rUnitName);
				 
				 String matStuffName = materialTakeForm.getMatStuffName();
				 matStuffName = new String (matStuffName.getBytes("ISO8859_1"),"utf-8");
				 materialTakeForm.setMatStuffName(matStuffName); 
			 
			DBWahoLocation dbWahoLocation = new DBWahoLocation();		 	
			List locaList = dbWahoLocation.GetLocationList(wahoCode, "", "AC");
			if (locaList.size() > 0) request.setAttribute("locaList", locaList);

			List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(doctypecode, docyear, "", docno, "", "", "", "", "", "");
			if (matTakeHDList.size() == 1) {
				request.setAttribute("matTakeHDList", matTakeHDList);
				MaterialTakeForm matTakeInfo = (MaterialTakeForm) matTakeHDList.get(0);
				
				materialTakeForm.setDocbycode(matTakeInfo.getDocbycode());
				materialTakeForm.setDocbyname(matTakeInfo.getDocbyname());
				materialTakeForm.setDate(matTakeInfo.getDate());
				materialTakeForm.setVendCode(matTakeInfo.getVendCode());
				materialTakeForm.setVendName(matTakeInfo.getVendName());
				materialTakeForm.setDocMonth(matTakeInfo.getDocMonth());
				materialTakeForm.setWahoCode(matTakeInfo.getWahoCode());
				materialTakeForm.setRemark(matTakeInfo.getRemark());
				materialTakeForm.setItemNo("**");
				//materialRetuForm.setLotNo(matRetuInfo.getDocYear()+"-"+matRetuInfo.getDocMonth()+"-"+matRetuInfo.getDocDate().substring(0,2));
				materialTakeForm.setLotno(matTakeInfo.getLotno());
			}
			List matTakeDTList = dbMaterialTake.GetMaterialTakeDTList(doctypecode, docyear, docno, "");
			if (matTakeDTList.size() > 0) request.setAttribute("matTakeDTList", matTakeDTList);
			
			materialTakeForm.setLotno(lotno);
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward search(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //12-04-2012
		String forwardText = "success";
		String loginId 		= "";
		String appCode  	= "mm42";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
       		
			List<MaterialTakeForm> itemlist = new ArrayList<MaterialTakeForm>();
			MaterialTakeForm materialTakeForm = (MaterialTakeForm) form;
			
			String docTypeCode		= 	materialTakeForm.getDocTypeCode();
			String docYear		= 	materialTakeForm.getDocYear();
			String docMonth		= 	materialTakeForm.getDocMonth();
			String docNo			=   materialTakeForm.getDocNo();
			String alertMessage = "";	
			int i=0;
			// add old record
			 if(request.getParameterValues("oldMatCode")!=null){
				 String[] hdrecno 			= request.getParameterValues("hdrecno");
				 String[] oldMatCode 		= request.getParameterValues("oldMatCode");
				 String[] oldMatTypeCode 	= request.getParameterValues("oldMatTypeCode");
				 String[] oldMatTypeName 	= request.getParameterValues("oldMatTypeName");
				 String[] categories 		= request.getParameterValues("categories");
				 String[] oldMatGrpName		= request.getParameterValues("oldMatGrpName");
				 String[] oldrefMatCode 	= request.getParameterValues("oldrefMatCode");
				 String[] oldrefMatName		= request.getParameterValues("oldrefMatName");
				 String[] oldmatName 		= request.getParameterValues("oldMatName");
				 String[] unit 				= request.getParameterValues("unit");
				 String[] oldrUnitName		= request.getParameterValues("oldrUnitName");
				 String[] quantity 			= request.getParameterValues("quantity");
				 String[] price 			= request.getParameterValues("price");
				 String[] amount 			= request.getParameterValues("amount");
				 String[] totalamount 		= request.getParameterValues("totalamount");
				 String[] oldMatBrandCode 	= request.getParameterValues("oldMatBrandCode");
				 String[] oldMatBrandName 	= request.getParameterValues("oldMatBrandName");
				 String[] oldMatColorCode 	= request.getParameterValues("oldMatColorCode");
				 String[] oldMatColorName 	= request.getParameterValues("oldMatColorName");
				 String[] oldMatStuffCode 	= request.getParameterValues("oldMatStuffCode");
				 String[] oldMatStuffName 	= request.getParameterValues("oldMatStuffName");
				 String[] oldNormalPrice 	= request.getParameterValues("oldNormalPrice");
				 String[] oldEmpPrice 		= request.getParameterValues("oldEmpPrice");
				 String[] oldCostPrice 		= request.getParameterValues("oldCostPrice");
				 String[] oldSpecialPrice 	= request.getParameterValues("oldSpecialPrice");
				 String[] oldVipPrice 		= request.getParameterValues("oldVipPrice");
				 String[] oldStock1 		= request.getParameterValues("oldStock1");
				 String[] oldStock2 		= request.getParameterValues("oldStock2");
				 
				for (int x=0;x<oldMatCode.length ;x++ ){
					MaterialTakeForm olditem = new MaterialTakeForm();
					i=i+1;
					olditem.setHdrecno(Integer.parseInt(hdrecno[x]));
					olditem.setMatCode(oldMatCode[x]);
					olditem.setMatTypeCode(oldMatTypeCode[x]);
					olditem.setMatTypeName(new String (oldMatTypeName[x].getBytes("ISO8859_1"),"utf-8"));
					olditem.setTakecategories(categories[x]);
					olditem.setMatGrpName(new String (oldMatGrpName[x].getBytes("ISO8859_1"),"utf-8"));
					olditem.setRefMatCode(oldrefMatCode[x]);
					olditem.setRefMatName(new String (oldrefMatName[x].getBytes("ISO8859_1"),"utf-8"));
					olditem.setMatName(new String (oldmatName[x].getBytes("ISO8859_1"),"utf-8"));
					olditem.setTakeunit(new String (unit[x].getBytes("ISO8859_1"),"utf-8"));
					olditem.setrUnitName(new String (oldrUnitName[x].getBytes("ISO8859_1"),"utf-8"));
					olditem.setTakequantity(quantity[x]);
					olditem.setTakeprice(price[x]);
					olditem.setTakeamount(amount[x]);
					olditem.setTaketotalamount(totalamount[x]);
					olditem.setMatBrandCode(oldMatBrandCode[x]);
					olditem.setMatBrandName(new String (oldMatBrandName[x].getBytes("ISO8859_1"),"utf-8"));
					olditem.setMatColorCode(oldMatColorCode[x]);
					olditem.setMatColorName(new String (oldMatColorName[x].getBytes("ISO8859_1"),"utf-8"));
					olditem.setMatStuffCode(oldMatStuffCode[x]);
					olditem.setMatStuffName(new String (oldMatStuffName[x].getBytes("ISO8859_1"),"utf-8"));
					olditem.setNormalPrice(oldNormalPrice[x]);
					olditem.setEmpPrice(oldEmpPrice[x]);
					olditem.setCostPrice(oldCostPrice[x]);
					olditem.setSpecialPrice(oldSpecialPrice[x]);
					olditem.setVipPrice(oldVipPrice[x]);
					olditem.setStock1(oldStock1[x]);
					olditem.setStock2(oldStock2[x]);
					
					itemlist.add(olditem);
					
				}
			 }
			 String wahoCode	= 	materialTakeForm.getWahoCode();
			 String qty			=   materialTakeForm.getTakequantity();
			 String stock		= "";
			 if(wahoCode.equals("A1")){
				  stock	= 	materialTakeForm.getStock1(); 
			 }else{
				 stock	= 	materialTakeForm.getStock2(); 
			 }
			 if(Float.parseFloat(qty)>Float.parseFloat(stock)){
				 
				 String unit = materialTakeForm.getTakeunit();
				 unit = new String (unit.getBytes("ISO8859_1"),"utf-8");
				 materialTakeForm.setTakeunit(unit);
				 
				 String matName = materialTakeForm.getMatName();
				 matName = new String (matName.getBytes("ISO8859_1"),"utf-8");
				 materialTakeForm.setMatName(matName);
				 
				 String matBrandName = materialTakeForm.getMatBrandName();
				 matBrandName = new String (matBrandName.getBytes("ISO8859_1"),"utf-8");
				 materialTakeForm.setMatBrandName(matBrandName);
				 
				 String matColorName = materialTakeForm.getMatColorName();
				 matColorName = new String (matColorName.getBytes("ISO8859_1"),"utf-8");
				 materialTakeForm.setMatColorName(matColorName);
				 
				 String rUnitName = materialTakeForm.getrUnitName();
				 rUnitName = new String (rUnitName.getBytes("ISO8859_1"),"utf-8");
				 materialTakeForm.setrUnitName(rUnitName);
				 
				 String matStuffName = materialTakeForm.getMatStuffName();
				 matStuffName = new String (matStuffName.getBytes("ISO8859_1"),"utf-8");
				 materialTakeForm.setMatStuffName(matStuffName);
					
				 alertMessage = "à¸ˆà¸³à¸™à¸§à¸™à¸ªà¹ˆà¸‡à¸ªà¸´à¸™à¸„à¹‰à¸²à¸¡à¸²à¸�à¸�à¸§à¹ˆà¸²à¸ªà¸´à¸™à¸„à¹‰à¸²à¹ƒà¸™à¸„à¸¥à¸±à¸‡";
				
				request.setAttribute("itemlist", itemlist);	
				request.setAttribute("alertMessage", alertMessage);
			 }else{
			 // add new record
			 materialTakeForm.setHdrecno(i+1);  // recno last rec +1 
			 
			 String unit = materialTakeForm.getTakeunit();
			 unit = new String (unit.getBytes("ISO8859_1"),"utf-8");
			 materialTakeForm.setTakeunit(unit);
			 
			 String matName = materialTakeForm.getMatName();
			 matName = new String (matName.getBytes("ISO8859_1"),"utf-8");
			 materialTakeForm.setMatName(matName);
			 
			 String matBrandName = materialTakeForm.getMatBrandName();
			 matBrandName = new String (matBrandName.getBytes("ISO8859_1"),"utf-8");
			 materialTakeForm.setMatBrandName(matBrandName);
			 
			 String matColorName = materialTakeForm.getMatColorName();
			 matColorName = new String (matColorName.getBytes("ISO8859_1"),"utf-8");
			 materialTakeForm.setMatColorName(matColorName);
			 
			 String rUnitName = materialTakeForm.getrUnitName();
			 rUnitName = new String (rUnitName.getBytes("ISO8859_1"),"utf-8");
			 materialTakeForm.setrUnitName(rUnitName);
			 
			 String matStuffName = materialTakeForm.getMatStuffName();
			 matStuffName = new String (matStuffName.getBytes("ISO8859_1"),"utf-8");
			 materialTakeForm.setMatStuffName(matStuffName);
			 
			 itemlist.add(materialTakeForm);
			
			 request.setAttribute("itemlist", itemlist);
			 }
			DBMatDocType dbMatDocType = new DBMatDocType();
			List matDocTypeList = dbMatDocType.GetMatDocTypeList("issu", "DEL", "AC");
			if (matDocTypeList.size() > 0) request.setAttribute("matDocTypeList", matDocTypeList);
				
			DBYear dbYear = new DBYear();
			List yearList = dbYear.GetYearList("","");
			if (yearList.size()>0) request.setAttribute("yearList", yearList);
							
			DBMonth dbMonth = new DBMonth();
			List monthList  = dbMonth.GetMonthList();
			if (monthList.size() > 0) request.setAttribute("monthList", monthList);
			 
			DBMaterialType dbMaterialType = new DBMaterialType();
			List matTypeList = dbMaterialType.GetMaterialTypeList("");
			if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);
			
			DBMaterialTake dbMaterialTake = new DBMaterialTake();
			List matCategorieList = dbMaterialTake.GetMaterialCategoriesList();
			if (matCategorieList.size() > 0) request.setAttribute("matCategorieList", matCategorieList);
			
			DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();
			List warehouseAuth = dbWarehouseAuth.GetWarehouseAuth("", loginId, "AC");
			if (warehouseAuth.size() > 0) request.setAttribute("warehouseAuth", warehouseAuth);
			
			DBMasterTable dbMasterTable = new DBMasterTable();
			List deptList = dbMasterTable.GetMasterTableDTList("dept", "", "", "AC");
			if (deptList.size() > 0) request.setAttribute("deptList", deptList);
			
			DBWahoLocation dbWahoLocation = new DBWahoLocation();		 	
			List locaList = dbWahoLocation.GetLocationList(wahoCode, "", "AC");
			if (locaList.size() > 0) request.setAttribute("locaList", locaList);
			
			List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(docTypeCode, docYear, "", docNo, "", "", "", "", "", "");
			if (matTakeHDList.size() == 1) {
				request.setAttribute("matTakeHDList", matTakeHDList);
				MaterialTakeForm matTakeInfo = (MaterialTakeForm) matTakeHDList.get(0);
				
				materialTakeForm.setDocbycode(matTakeInfo.getDocbycode());
				materialTakeForm.setDocbyname(matTakeInfo.getDocbyname());
				materialTakeForm.setDate(matTakeInfo.getDate());
				materialTakeForm.setVendCode(matTakeInfo.getVendCode());
				materialTakeForm.setVendName(matTakeInfo.getVendName());
				materialTakeForm.setDocMonth(matTakeInfo.getDocMonth());
				materialTakeForm.setWahoCode(matTakeInfo.getWahoCode());
				materialTakeForm.setRemark(matTakeInfo.getRemark());
				materialTakeForm.setItemNo("**");
				//materialRetuForm.setLotNo(matRetuInfo.getDocYear()+"-"+matRetuInfo.getDocMonth()+"-"+matRetuInfo.getDocDate().substring(0,2));
				materialTakeForm.setLotno(matTakeInfo.getDate());
			}
			List matTakeDTList = dbMaterialTake.GetMaterialTakeDTList(docTypeCode, docYear, docNo, "");
			if (matTakeDTList.size() > 0) request.setAttribute("matTakeDTList", matTakeDTList);
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	
	///================= update
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
		throws Exception { //12-04-2012
			String forwardText = "success";
			String loginId 		= "";
			String appCode  	= "mm42";
		    int	i=1;
		    int    arecno               =0;
			try {
				HttpSession session = request.getSession();
				if (session.isNew()) {
					session.invalidate();
					request.setAttribute("alertMessage","Session Timeout. Login again.");
					return mapping.findForward("relogin");
				} else {
					loginId = (String) session.getAttribute("loginId");
					if (loginId == null) {
						request.setAttribute("alertMessage","Please Login.");
						return mapping.findForward("relogin");
					}
				}
				DBLogin dbLogin = new DBLogin();			
				if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
					request.setAttribute("alertMessage","You don't have authorize.");
					return mapping.findForward("alertmsg");
				}
	       		
				List<MaterialTakeForm> itemlist = new ArrayList<MaterialTakeForm>();
				MaterialTakeForm materialTakeForm = (MaterialTakeForm) form;
				String docTypeCode	= 	materialTakeForm.getDocTypeCode();
				String docYear		= 	materialTakeForm.getDocYear();
				String docMonth		= 	materialTakeForm.getDocMonth();
				String docNo		=	materialTakeForm.getDocNo();
				String wahoCode		= 	materialTakeForm.getWahoCode();
				String alertMessage		= "";
				
				int recno 				=	materialTakeForm.getRecno();
				   arecno               = 	recno-1;
				 String matCode 		=	materialTakeForm.getMatCode();
				 String matTypeCode 	=	materialTakeForm.getMatTypeCode();
				 String categories 		=	materialTakeForm.getTakecategories();	
				 String refMatCode 		=	materialTakeForm.getRefMatCode();
				 String matName			=	materialTakeForm.getMatName();	
				 String unit 			=	materialTakeForm.getTakeunit();
				 String quantity 		=	materialTakeForm.getTakequantity();	
				 String price 			=	materialTakeForm.getTakeprice();
				 String amount 			=	materialTakeForm.getTakeamount();
				 String totalamount 	=	materialTakeForm.getTaketotalamount();
				 String matBrandCode 	=	materialTakeForm.getMatBrandCode();
				 String matColorCode 	=	materialTakeForm.getMatColorCode();
				 String matStuffCode 	= 	materialTakeForm.getMatStuffCode();
				 String mormalPrice 	= 	materialTakeForm.getNormalPrice();
				 String empPrice 		= 	materialTakeForm.getEmpPrice();
				 String costPrice 		= 	materialTakeForm.getCostPrice();
				 String specialPrice 	= 	materialTakeForm.getSpecialPrice();
				 String vipPrice 		= 	materialTakeForm.getVipPrice();
				 String stock1 			= 	materialTakeForm.getStock1();
				 String stock2 			= 	materialTakeForm.getStock2();
				 //
				 String matTypeName 	= 	materialTakeForm.getMatTypeName();
				 String matGrpName		= 	materialTakeForm.getMatGrpName();
				 String refMatName		= 	materialTakeForm.getRefMatName();
				 String rUnitName		= 	materialTakeForm.getrUnitName();
				 String matBrandName 	= 	materialTakeForm.getMatBrandName();
				 String matColorName 	= 	materialTakeForm.getMatColorName();
				 String matStuffName 	= 	materialTakeForm.getMatStuffName();
			 
				// add old record
				 if(request.getParameterValues("oldMatCode")!=null){
					 String[] hdrecno 			= request.getParameterValues("hdrecno");
					 String[] oldMatCode 		= request.getParameterValues("oldMatCode");
					 String[] oldMatTypeCode 	= request.getParameterValues("oldMatTypeCode");
					 String[] hdcategories 		= request.getParameterValues("categories");
					 String[] oldrefMatCode 	= request.getParameterValues("oldrefMatCode");
					 String[] hdMatName 		= request.getParameterValues("oldMatName");
					 String[] hdunit 			= request.getParameterValues("unit");
					 String[] hdquantity 		= request.getParameterValues("quantity");
					 String[] hdprice 			= request.getParameterValues("price");
					 String[] hdamount 			= request.getParameterValues("amount");
					 String[] hdtotalamount 	= request.getParameterValues("totalamount");
					 String[] oldMatBrandCode 	= request.getParameterValues("oldMatBrandCode");
					 String[] oldMatColorCode 	= request.getParameterValues("oldMatColorCode");
					 String[] oldMatStuffCode 	= request.getParameterValues("oldMatStuffCode");
					 String[] oldNormalPrice 	= request.getParameterValues("oldNormalPrice");
					 String[] oldEmpPrice 		= request.getParameterValues("oldEmpPrice");
					 String[] oldCostPrice 		= request.getParameterValues("oldCostPrice");
					 String[] oldSpecialPrice 	= request.getParameterValues("oldSpecialPrice");
					 String[] oldVipPrice 		= request.getParameterValues("oldVipPrice");
					 String[] oldStock1 		= request.getParameterValues("oldStock1");
					 String[] oldStock2 		= request.getParameterValues("oldStock2");
					 //
					 String[] oldMatTypeName 	= request.getParameterValues("oldMatTypeName");
					 String[] oldMatGrpName		= request.getParameterValues("oldMatGrpName");
					 String[] oldrefMatName		= request.getParameterValues("oldrefMatName");
					 String[] oldmatName 		= request.getParameterValues("oldMatName");
					 String[] oldrUnitName		= request.getParameterValues("oldrUnitName");
					 String[] oldMatBrandName 	= request.getParameterValues("oldMatBrandName");
					 String[] oldMatColorName 	= request.getParameterValues("oldMatColorName");
					 String[] oldMatStuffName 	= request.getParameterValues("oldMatStuffName");
					  
					 int x = 0;
					for ( x=0;x<oldMatCode.length ;x++ ){
						MaterialTakeForm olditem = new MaterialTakeForm();
						i=i+1;
						String qty			=   materialTakeForm.getTakequantity();
						String stock		= "";
						 if(wahoCode.equals("A1")){
							 stock	= 	materialTakeForm.getStock1(); 
						 }else{
							 stock	= 	materialTakeForm.getStock2(); 
						 }
						if (x == arecno && Float.parseFloat(qty)<Float.parseFloat(stock)){
							//new record update
							olditem.setHdrecno(recno);
							olditem.setMatCode(matCode);
							olditem.setMatTypeCode(matTypeCode);
							olditem.setTakecategories(categories);
							olditem.setRefMatCode(refMatCode);
							olditem.setMatName(new String(matName.getBytes("ISO8859_1"),"utf-8"));
							olditem.setTakeunit(new String (unit.getBytes("ISO8859_1"),"utf-8"));
							olditem.setTakequantity(quantity);
							olditem.setTakeprice(price);
							olditem.setTakeamount(amount);
							olditem.setTaketotalamount(totalamount); 
							olditem.setMatBrandCode(matBrandCode);
							olditem.setMatColorCode(matColorCode);
							olditem.setMatStuffCode(matStuffCode);
							olditem.setNormalPrice(mormalPrice);
							olditem.setEmpPrice(empPrice);
							olditem.setCostPrice(costPrice);
							olditem.setSpecialPrice(specialPrice);
							olditem.setVipPrice(vipPrice);
							olditem.setStock1(stock1);
							olditem.setStock2(stock2);
							//
							olditem.setMatTypeName(new String (matTypeName.getBytes("ISO8859_1"),"utf-8"));
							olditem.setMatGrpName(new String (matGrpName.getBytes("ISO8859_1"),"utf-8"));
							olditem.setRefMatName(new String (refMatName.getBytes("ISO8859_1"),"utf-8"));
							olditem.setrUnitName(new String (rUnitName.getBytes("ISO8859_1"),"utf-8"));
							olditem.setMatBrandName(new String (matBrandName.getBytes("ISO8859_1"),"utf-8"));
							olditem.setMatColorName(new String (matColorName.getBytes("ISO8859_1"),"utf-8"));
							olditem.setMatStuffName(new String (matStuffName.getBytes("ISO8859_1"),"utf-8"));
							
						//String matBrandName = materialTakeForm.getMatBrandName();
						//matBrandName = new String (matBrandName.getBytes("ISO8859_1"),"utf-8");
						materialTakeForm.setMatBrandName(matBrandName);
						 
						//String matColorName = materialTakeForm.getMatColorName();
						//matColorName = new String (matColorName.getBytes("ISO8859_1"),"utf-8");
						materialTakeForm.setMatColorName(matColorName);
						 
						//String rUnitName = materialTakeForm.getrUnitName();
						//rUnitName = new String (rUnitName.getBytes("ISO8859_1"),"utf-8");
						materialTakeForm.setrUnitName(rUnitName);
						 
						//String matStuffName = materialTakeForm.getMatStuffName();
						//matStuffName = new String (matStuffName.getBytes("ISO8859_1"),"utf-8");
						materialTakeForm.setMatStuffName(matStuffName);
							
						}else{
						    // old record
						olditem.setHdrecno(Integer.parseInt(hdrecno[x]));
						olditem.setMatCode(oldMatCode[x]);
						olditem.setMatTypeCode(oldMatTypeCode[x]);
						olditem.setTakecategories(hdcategories[x]);
						olditem.setRefMatCode(oldrefMatCode[x]);
						olditem.setMatName(new String(hdMatName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setTakeunit(new String (hdunit[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setTakequantity(hdquantity[x]);
						olditem.setTakeprice(hdprice[x]);
						olditem.setTakeamount(hdamount[x]);
						olditem.setTaketotalamount(hdtotalamount[x]);
						olditem.setMatBrandCode(oldMatBrandCode[x]);
						olditem.setMatColorCode(oldMatColorCode[x]);
						olditem.setMatStuffCode(oldMatStuffCode[x]);
						olditem.setNormalPrice(oldNormalPrice[x]);
						olditem.setEmpPrice(oldEmpPrice[x]);
						olditem.setCostPrice(oldCostPrice[x]);
						olditem.setSpecialPrice(oldSpecialPrice[x]);
						olditem.setVipPrice(oldVipPrice[x]);
						olditem.setStock1(oldStock1[x]);
						olditem.setStock2(oldStock2[x]);
						//
						olditem.setMatTypeName(new String (oldMatTypeName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setMatGrpName(new String (oldMatGrpName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setRefMatName(new String (oldrefMatName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setMatName(new String (oldmatName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setrUnitName(new String (oldrUnitName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setMatBrandName(new String (oldMatBrandName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setMatColorName(new String (oldMatColorName[x].getBytes("ISO8859_1"),"utf-8"));;
						olditem.setMatStuffName(new String (oldMatStuffName[x].getBytes("ISO8859_1"),"utf-8"));
						
						}
						
						itemlist.add(olditem);
					}
					
				 }
				 
				 String qty			=   materialTakeForm.getTakequantity();
				 String stock		= "";
				 if(wahoCode.equals("A1")){
					  stock	= 	materialTakeForm.getStock1(); 
				 }else{
					 stock	= 	materialTakeForm.getStock2(); 
				 }
				 if(Float.parseFloat(qty)>Float.parseFloat(stock)){
					 
					 materialTakeForm.setTakeunit(new String (unit.getBytes("ISO8859_1"),"utf-8"));
					 materialTakeForm.setMatName(new String (matName.getBytes("ISO8859_1"),"utf-8"));	 
					 materialTakeForm.setMatBrandName(new String (matBrandName.getBytes("ISO8859_1"),"utf-8"));
					 materialTakeForm.setMatColorName(new String (matColorName.getBytes("ISO8859_1"),"utf-8")); 
					 materialTakeForm.setrUnitName(new String (rUnitName.getBytes("ISO8859_1"),"utf-8"));
					 materialTakeForm.setMatStuffName(new String (matStuffName.getBytes("ISO8859_1"),"utf-8"));	
					 materialTakeForm.setMatName(new String(matName.getBytes("ISO8859_1"),"utf-8"));
						
					 alertMessage = "à¸ˆà¸³à¸™à¸§à¸™à¸ªà¹ˆà¸‡à¸ªà¸´à¸™à¸„à¹‰à¸²à¸¡à¸²à¸�à¸�à¸§à¹ˆà¸²à¸ªà¸´à¸™à¸„à¹‰à¸²à¹ƒà¸™à¸„à¸¥à¸±à¸‡";
					
					request.setAttribute("itemlist", itemlist);	
					request.setAttribute("alertMessage", alertMessage);
				 }else{
				 materialTakeForm.setTakeunit(new String (unit.getBytes("ISO8859_1"),"utf-8"));
				 materialTakeForm.setMatName(new String (matName.getBytes("ISO8859_1"),"utf-8"));	 
				 materialTakeForm.setMatBrandName(new String (matBrandName.getBytes("ISO8859_1"),"utf-8"));
				 materialTakeForm.setMatColorName(new String (matColorName.getBytes("ISO8859_1"),"utf-8")); 
				 materialTakeForm.setrUnitName(new String (rUnitName.getBytes("ISO8859_1"),"utf-8"));
				 materialTakeForm.setMatStuffName(new String (matStuffName.getBytes("ISO8859_1"),"utf-8"));	
				 materialTakeForm.setMatName(new String(matName.getBytes("ISO8859_1"),"utf-8"));
				 
				 request.setAttribute("itemlist", itemlist); 
				 }	 
				DBMaterialType dbMaterialType = new DBMaterialType();
				List matTypeList = dbMaterialType.GetMaterialTypeList("");
				if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);
				
				DBMaterialTake dbMaterialTake = new DBMaterialTake();
				List matCategorieList = dbMaterialTake.GetMaterialCategoriesList();
				if (matCategorieList.size() > 0) request.setAttribute("matCategorieList", matCategorieList);
				
				DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();
				List warehouseAuth = dbWarehouseAuth.GetWarehouseAuth("", loginId, "AC");
				if (warehouseAuth.size() > 0) request.setAttribute("warehouseAuth", warehouseAuth);
				
				DBMatDocType dbMatDocType = new DBMatDocType();
				List matDocTypeList = dbMatDocType.GetMatDocTypeList("issu", "DEL", "AC");
				if (matDocTypeList.size() > 0) request.setAttribute("matDocTypeList", matDocTypeList);
					
				DBYear dbYear = new DBYear();
				List yearList = dbYear.GetYearList("","");
				if (yearList.size()>0) request.setAttribute("yearList", yearList);
								
				DBMonth dbMonth = new DBMonth();
				List monthList  = dbMonth.GetMonthList();
				if (monthList.size() > 0) request.setAttribute("monthList", monthList);
				
				DBWahoLocation dbWahoLocation = new DBWahoLocation();		 	
				List locaList = dbWahoLocation.GetLocationList(wahoCode, "", "AC");
				if (locaList.size() > 0) request.setAttribute("locaList", locaList);
				
				DBMasterTable dbMasterTable = new DBMasterTable();
				List deptList = dbMasterTable.GetMasterTableDTList("dept", "", "", "AC");
				if (deptList.size() > 0) request.setAttribute("deptList", deptList);
				
				List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(docTypeCode, docYear, "", docNo, "", "", "", "", "", "");
				if (matTakeHDList.size() == 1) {
					request.setAttribute("matTakeHDList", matTakeHDList);
					MaterialTakeForm matTakeInfo = (MaterialTakeForm) matTakeHDList.get(0);
					
					materialTakeForm.setDocbycode(matTakeInfo.getDocbycode());
					materialTakeForm.setDocbyname(matTakeInfo.getDocbyname());
					materialTakeForm.setDate(matTakeInfo.getDate());
					materialTakeForm.setVendCode(matTakeInfo.getVendCode());
					materialTakeForm.setVendName(matTakeInfo.getVendName());
					materialTakeForm.setDocMonth(matTakeInfo.getDocMonth());
					materialTakeForm.setWahoCode(matTakeInfo.getWahoCode());
					materialTakeForm.setRemark(matTakeInfo.getRemark());
					materialTakeForm.setItemNo("**");
					//materialRetuForm.setLotNo(matRetuInfo.getDocYear()+"-"+matRetuInfo.getDocMonth()+"-"+matRetuInfo.getDocDate().substring(0,2));
					materialTakeForm.setLotno(matTakeInfo.getDate());
				}
				List matTakeDTList = dbMaterialTake.GetMaterialTakeDTList(docTypeCode, docYear, docNo, "");
				if (matTakeDTList.size() > 0) request.setAttribute("matTakeDTList", matTakeDTList);
				
			} catch (Exception e) {
				throw new Exception(e.getMessage());
			}
			return  mapping.findForward(forwardText);
		}
	
	
 ///==========================update
	///================= delete
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
		throws Exception { //12-04-2012
			String forwardText = "success";
			String loginId 		= "";
			String appCode  	= "mm42";
		   
		  
			try {
				HttpSession session = request.getSession();
				if (session.isNew()) {
					session.invalidate();
					request.setAttribute("alertMessage","Session Timeout. Login again.");
					return mapping.findForward("relogin");
				} else {
					loginId = (String) session.getAttribute("loginId");
					if (loginId == null) {
						request.setAttribute("alertMessage","Please Login.");
						return mapping.findForward("relogin");
					}
				}
				DBLogin dbLogin = new DBLogin();			
				if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
					request.setAttribute("alertMessage","You don't have authorize.");
					return mapping.findForward("alertmsg");
				}
	       		
				List<MaterialTakeForm> itemlist = new ArrayList<MaterialTakeForm>();
				MaterialTakeForm materialTakeForm = (MaterialTakeForm) form;
				
				String docTypeCode		= materialTakeForm.getDocTypeCode();
				String docYear			= materialTakeForm.getDocYear();
				String docMonth			= materialTakeForm.getDocMonth();
				String docNo			= materialTakeForm.getDocNo();
				String alertMessage		= "";
				String wahoCode 		= materialTakeForm.getWahoCode();
				String lotno			= materialTakeForm.getLotno();
				int recno 				= materialTakeForm.getRecno();				   

				// add old record
				 if(request.getParameterValues("oldMatCode")!=null){
					 String[] hdrecno 			= request.getParameterValues("hdrecno");
					 String[] oldMatCode 		= request.getParameterValues("oldMatCode");
					 String[] oldMatTypeCode 	= request.getParameterValues("oldMatTypeCode");
					 String[] hdcategories 		= request.getParameterValues("categories");
					 String[] hdrefMatCode		= request.getParameterValues("oldrefMatCode");
					 String[] hdmatName 		= request.getParameterValues("oldMatName");
					 String[] hdunit 			= request.getParameterValues("unit");
					 String[] hdquantity 		= request.getParameterValues("quantity");
					 String[] hdprice 			= request.getParameterValues("price");
					 String[] hdamount 			= request.getParameterValues("amount");
					 String[] hdtotalamount 	= request.getParameterValues("totalamount");
					 String[] oldMatBrandCode 	= request.getParameterValues("oldMatBrandCode");
					 String[] oldMatColorCode 	= request.getParameterValues("oldMatColorCode");
					 String[] oldMatStuffCode 	= request.getParameterValues("oldMatStuffCode");
					 String[] oldNormalPrice 	= request.getParameterValues("oldNormalPrice");
					 String[] oldEmpPrice 		= request.getParameterValues("oldEmpPrice");
					 String[] oldCostPrice 		= request.getParameterValues("oldCostPrice");
					 String[] oldSpecialPrice 	= request.getParameterValues("oldSpecialPrice");
					 String[] oldVipPrice 		= request.getParameterValues("oldVipPrice");
					 String[] oldStock1 		= request.getParameterValues("oldStock1");
					 String[] oldStock2 		= request.getParameterValues("oldStock2");
					 //
					 String[] oldMatTypeName 	= request.getParameterValues("oldMatTypeName");
					 String[] oldMatGrpName		= request.getParameterValues("oldMatGrpName");
					 String[] oldrefMatName		= request.getParameterValues("oldrefMatName");
					 String[] oldmatName 		= request.getParameterValues("oldMatName");
					 String[] oldrUnitName		= request.getParameterValues("oldrUnitName");
					 String[] oldMatBrandName 	= request.getParameterValues("oldMatBrandName");
					 String[] oldMatColorName 	= request.getParameterValues("oldMatColorName");
					 String[] oldMatStuffName 	= request.getParameterValues("oldMatStuffName");
				 
					 int x = 0;
					 int i = 0;
					for ( x=0;x<oldMatCode.length ;x++ ){
						MaterialTakeForm olditem = new MaterialTakeForm();
						i= i+1;
						
						olditem.setHdrecno(i);
						if (x==(recno-1) ){
					 		i= i-1;
							 
					String unit = materialTakeForm.getTakeunit();
					unit = new String (unit.getBytes("ISO8859_1"),"utf-8");
					materialTakeForm.setTakeunit(unit);
					
					String matName = materialTakeForm.getMatName();
					matName = new String (matName.getBytes("ISO8859_1"),"utf-8");
					materialTakeForm.setMatName(matName);
					
					String matBrandName = materialTakeForm.getMatBrandName();
					matBrandName = new String (matBrandName.getBytes("ISO8859_1"),"utf-8");
					materialTakeForm.setMatBrandName(matBrandName);
					 
					String matColorName = materialTakeForm.getMatColorName();
					matColorName = new String (matColorName.getBytes("ISO8859_1"),"utf-8");
					materialTakeForm.setMatColorName(matColorName);
					 
					String rUnitName = materialTakeForm.getrUnitName();
					rUnitName = new String (rUnitName.getBytes("ISO8859_1"),"utf-8");
					materialTakeForm.setrUnitName(rUnitName);
					 
					String matStuffName = materialTakeForm.getMatStuffName();
					matStuffName = new String (matStuffName.getBytes("ISO8859_1"),"utf-8");
					materialTakeForm.setMatStuffName(matStuffName);
					
						}else{
						    // old record
						olditem.setMatCode(oldMatCode[x]);
						olditem.setMatTypeCode(oldMatTypeCode[x]);
						olditem.setTakecategories(hdcategories[x]);
						olditem.setRefMatCode(hdrefMatCode[x]);
						olditem.setMatName(new String (hdmatName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setTakeunit(new String (hdunit[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setTakequantity(hdquantity[x]);
						olditem.setTakeprice(hdprice[x]);
						olditem.setTakeamount(hdamount[x]);
						olditem.setTaketotalamount(hdtotalamount[x]);
						olditem.setMatBrandCode(oldMatBrandCode[x]);
						olditem.setMatColorCode(oldMatColorCode[x]);
						olditem.setMatStuffCode(oldMatStuffCode[x]);
						olditem.setNormalPrice(oldNormalPrice[x]);
						olditem.setEmpPrice(oldEmpPrice[x]);
						olditem.setCostPrice(oldCostPrice[x]);
						olditem.setSpecialPrice(oldSpecialPrice[x]);
						olditem.setVipPrice(oldVipPrice[x]);
						olditem.setStock1(oldStock1[x]);
						olditem.setStock2(oldStock2[x]);
						//
						olditem.setMatTypeName(new String (oldMatTypeName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setMatGrpName(new String (oldMatGrpName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setRefMatName(new String (oldrefMatName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setMatName(new String (oldmatName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setrUnitName(new String (oldrUnitName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setMatBrandName(new String (oldMatBrandName[x].getBytes("ISO8859_1"),"utf-8"));
						olditem.setMatColorName(new String (oldMatColorName[x].getBytes("ISO8859_1"),"utf-8"));;
						olditem.setMatStuffName(new String (oldMatStuffName[x].getBytes("ISO8859_1"),"utf-8"));
						
						
						itemlist.add(olditem);
						
						materialTakeForm.initial();
						}
					}
				 }
				
				    String unit = materialTakeForm.getTakeunit();
					unit = new String (unit.getBytes("ISO8859_1"),"utf-8");
					materialTakeForm.setTakeunit(unit);
					
					String matName = materialTakeForm.getMatName();
					matName = new String (matName.getBytes("ISO8859_1"),"utf-8");
					materialTakeForm.setMatName(matName);
					
					String matBrandName = materialTakeForm.getMatBrandName();
					matBrandName = new String (matBrandName.getBytes("ISO8859_1"),"utf-8");
					materialTakeForm.setMatBrandName(matBrandName);
					 
					String matColorName = materialTakeForm.getMatColorName();
					matColorName = new String (matColorName.getBytes("ISO8859_1"),"utf-8");
					materialTakeForm.setMatColorName(matColorName);
					 
					String rUnitName = materialTakeForm.getrUnitName();
					rUnitName = new String (rUnitName.getBytes("ISO8859_1"),"utf-8");
					materialTakeForm.setrUnitName(rUnitName);
					 
					String matStuffName = materialTakeForm.getMatStuffName();
					matStuffName = new String (matStuffName.getBytes("ISO8859_1"),"utf-8");
					materialTakeForm.setMatStuffName(matStuffName);
				
				 request.setAttribute("itemlist", itemlist);
				
				DBMaterialType dbMaterialType = new DBMaterialType();
				List matTypeList = dbMaterialType.GetMaterialTypeList("");
				if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);
				
				DBMaterialTake dbMaterialTake = new DBMaterialTake();
				List matCategorieList = dbMaterialTake.GetMaterialCategoriesList();
				if (matCategorieList.size() > 0) request.setAttribute("matCategorieList", matCategorieList);
				
				DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();
				List warehouseAuth = dbWarehouseAuth.GetWarehouseAuth("", loginId, "AC");
				if (warehouseAuth.size() > 0) request.setAttribute("warehouseAuth", warehouseAuth);
				
				DBWahoLocation dbWahoLocation = new DBWahoLocation();		 	
				List locaList = dbWahoLocation.GetLocationList(wahoCode, "", "AC");
				if (locaList.size() > 0) request.setAttribute("locaList", locaList);
				
				DBMatDocType dbMatDocType = new DBMatDocType();
				List matDocTypeList = dbMatDocType.GetMatDocTypeList("issu", "DEL", "AC");
				if (matDocTypeList.size() > 0) request.setAttribute("matDocTypeList", matDocTypeList);
					
				DBYear dbYear = new DBYear();
				List yearList = dbYear.GetYearList("","");
				if (yearList.size()>0) request.setAttribute("yearList", yearList);
								
				DBMonth dbMonth = new DBMonth();
				List monthList  = dbMonth.GetMonthList();
				if (monthList.size() > 0) request.setAttribute("monthList", monthList);
				
				DBMasterTable dbMasterTable = new DBMasterTable();
				List deptList = dbMasterTable.GetMasterTableDTList("dept", "", "", "AC");
				if (deptList.size() > 0) request.setAttribute("deptList", deptList);
				
				List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(docTypeCode, docYear, "", docNo, "", "", "", "", "", "");
				if (matTakeHDList.size() == 1) {
					request.setAttribute("matTakeHDList", matTakeHDList);
					MaterialTakeForm matTakeInfo = (MaterialTakeForm) matTakeHDList.get(0);
					
					materialTakeForm.setDocbycode(matTakeInfo.getDocbycode());
					materialTakeForm.setDocbyname(matTakeInfo.getDocbyname());
					materialTakeForm.setDate(matTakeInfo.getDate());
					materialTakeForm.setVendCode(matTakeInfo.getVendCode());
					materialTakeForm.setVendName(matTakeInfo.getVendName());
					materialTakeForm.setDocMonth(matTakeInfo.getDocMonth());
					materialTakeForm.setWahoCode(matTakeInfo.getWahoCode());
					materialTakeForm.setRemark(matTakeInfo.getRemark());
					materialTakeForm.setItemNo("**");
					//materialRetuForm.setLotNo(matRetuInfo.getDocYear()+"-"+matRetuInfo.getDocMonth()+"-"+matRetuInfo.getDocDate().substring(0,2));
					materialTakeForm.setLotno(matTakeInfo.getDate());
				}
				List matTakeDTList = dbMaterialTake.GetMaterialTakeDTList(docTypeCode, docYear, docNo, "");
				if (matTakeDTList.size() > 0) request.setAttribute("matTakeDTList", matTakeDTList);
				
				materialTakeForm.setLotno(lotno);
			} catch (Exception e) {
				throw new Exception(e.getMessage());
			}
			return  mapping.findForward(forwardText);
		}
 ///==========================delete
	public ActionForward print(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
		throws Exception { //23-10-2012
			String forwardText 	= "print";
			String loginId 		= "";
			String appCode  	= "mm42";
			try {
				HttpSession session = request.getSession();
				if (session.isNew()) {
					session.invalidate();
					request.setAttribute("alertMessage","Session Timeout. Login again.");
					return mapping.findForward("relogin");
				} else {
					loginId = (String) session.getAttribute("loginId");
					if (loginId == null) {
						request.setAttribute("alertMessage","Please Login.");
						return mapping.findForward("relogin");
					}
				}
				DBLogin dbLogin = new DBLogin();			
				if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
					request.setAttribute("alertMessage","You don't have authorize.");
					return mapping.findForward("alertmsg");
				}

				MaterialTakeForm materialTakeForm = (MaterialTakeForm) form;
				String doctypecode	= materialTakeForm.getDocTypeCode();
				String docyear		= materialTakeForm.getDocYear();
				String docno		= materialTakeForm.getDocNo();
				String date			= materialTakeForm.getLotno();
				
				DateUtil dateUtil = new DateUtil();
				request.setAttribute("docTypeCode", doctypecode); 
				request.setAttribute("docYear", docyear);
				request.setAttribute("docNo", docno);
				request.setAttribute("date",dateUtil.CnvToYYYYMMDDEngYear(date, '-'));
				
			} catch (Exception e) {
				throw new Exception(e.getMessage());
			}
			return  mapping.findForward(forwardText);
		}
}