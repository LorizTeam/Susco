/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.inventory.action;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.inventory.data.DBWarehouseAuth;
import com.dtac.inventory.form.WarehouseForm;

public class WarehouseAuthAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();		
		map.put("warehouseform.button.back",	"remove");
		map.put("warehouseform.button.next",	"add");
		return map;
	}

	public ActionForward remove(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //18-06-2012
		String forwardText = "success";
		String loginId 		= "";
		String appCode  	= "mm22";		
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");				
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			WarehouseForm warehouseForm = (WarehouseForm) form;
			String wahoName = new String(warehouseForm.getWahoName().getBytes("ISO8859_1"),"utf-8");
			String wahoCode = warehouseForm.getWahoCode();
			String empID = "";
				
			DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();
			
			String select[] = request.getParameterValues("empAuth");
			if (select!=null){
				for(int i =0;i<select.length;i++){
				
					empID=select[i];
					if(dbWarehouseAuth.CheckWarehouseAuth(wahoCode, empID)==true){
						dbWarehouseAuth.UpdateWarehouseAuth(wahoCode, empID, "CA", loginId);
					}else{
						
					}
				}
			}
			
			List warehouseAuthList = dbWarehouseAuth.GetWarehouseAuth(wahoCode, "", "AC");
			if (warehouseAuthList.size() > 0) request.setAttribute("warehouseAuthList", warehouseAuthList);

			List notAuthList = dbWarehouseAuth.GetEmployeeNotInWarehouseAuth(wahoCode);
			if (notAuthList.size() > 0) request.setAttribute("notAuthList", notAuthList);
			
			warehouseForm.setWahoName(wahoName);
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward add(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //18-06-2012
		String forwardText = "success";
		String loginId 		= "";
		String appCode  	= "mm22";		
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");				
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			WarehouseForm warehouseForm = (WarehouseForm) form;
			String wahoName = new String(warehouseForm.getWahoName().getBytes("ISO8859_1"),"utf-8");
			String wahoCode = warehouseForm.getWahoCode();
			String empID = "";
				
			DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();

			String select[] = request.getParameterValues("empNotAuth");
			if (select!=null){
				for(int i =0;i<select.length;i++){
				
					empID=select[i];
					if(dbWarehouseAuth.CheckWarehouseAuth(wahoCode, empID)==true){
						dbWarehouseAuth.UpdateWarehouseAuth(wahoCode, empID, "AC",loginId);
					}else{
						dbWarehouseAuth.AddWarehouseAuth(wahoCode, empID);
					}
				}
			}
		
			List warehouseAuthList = dbWarehouseAuth.GetWarehouseAuth(wahoCode, "", "AC");
			if (warehouseAuthList.size() > 0) request.setAttribute("warehouseAuthList", warehouseAuthList);

			List notAuthList = dbWarehouseAuth.GetEmployeeNotInWarehouseAuth(wahoCode);
			if (notAuthList.size() > 0) request.setAttribute("notAuthList", notAuthList);
			
			warehouseForm.setWahoName(wahoName);
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
}