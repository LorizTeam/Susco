/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.inventory.action;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.inventory.data.DBWahoLocation;
import com.dtac.inventory.form.WarehouseForm;
/** 
 * MyEclipse Struts
 * Creation date: 26-04-2012
 */
public class WahoLocationViewAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();
		map.put("warehouseform.button.save",  	"save");
		map.put("warehouseform.button.update",	"update");
		return map;
	}
	
	public ActionForward save(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) 
	throws Exception {	//02-05-2012
		String forwardText 	= "success";
		String loginId 		= "";
		String appCode  	= "mm22";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			WarehouseForm warehouseForm = (WarehouseForm) form;
			String wahoCode		= warehouseForm.getWahoCode();
			String wahoName		= new String(warehouseForm.getWahoName().getBytes("ISO8859_1"),"utf-8");
			//String wahoStatus 	= warehouseForm.getWahoStatus();
			String locaCode		= warehouseForm.getLocaCode();
			String locaName 	= new String(warehouseForm.getLocaName().getBytes("ISO8859_1"),"utf-8");
			String locaStatus 	= warehouseForm.getLocaStatus();
			
			DBWahoLocation dbWahoLocation = new DBWahoLocation();
			if (locaCode.equals("")) {				
				request.setAttribute("alertMessage", "กรอกรหัสสถานที่");
				
			} else if (locaCode.length() != 2) {				
				request.setAttribute("alertMessage", "รหัสสถานที่ต้องยาว 2 หลัก");
				
			} else if (locaName.equals("")) {
				request.setAttribute("alertMessage", "กรอกชื่อสถานที่");
				
			} else if (dbWahoLocation.CheckLocation(wahoCode, locaCode)) {
				dbWahoLocation.UpdateLocation(wahoCode, locaCode, locaName, locaStatus);
			} else {
				dbWahoLocation.AddLocation(wahoCode, locaCode, locaName, locaStatus);
			}
						
			List locationList = dbWahoLocation.GetLocationList(wahoCode, "", "");
			if (locationList.size() > 0 ) request.setAttribute("locationList", locationList);
			
			
			warehouseForm.setLocaName(locaName);
			warehouseForm.setWahoName(wahoName);
						
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward update(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) 
	throws Exception {	//02-05-2012
		String forwardText 	= "update";
		String loginId 		= "";
		String appCode  	= "mm22";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			WarehouseForm warehouseForm = (WarehouseForm) form;
			String wahoCode	= warehouseForm.getWahoCode();
			String wahoName	= new String(warehouseForm.getWahoName().getBytes("ISO8859_1"),"utf-8");
			String locaCode	= warehouseForm.getLocaCode();
			String pic1		= "";
			String pic2		= "";
			
			DBWahoLocation dbWahoLocation = new DBWahoLocation ();			
			List wahoLocationList = dbWahoLocation.GetLocationList(wahoCode, locaCode, "");			
			if (wahoLocationList.size() == 1) {
				WarehouseForm wareInfo = (WarehouseForm) wahoLocationList.get(0);
				warehouseForm.setWahoCode(wareInfo.getWahoCode());
				warehouseForm.setWahoName(wareInfo.getWahoName());
				warehouseForm.setWahoStatus(wareInfo.getWahoStatus());
				warehouseForm.setLocaCode(wareInfo.getLocaCode());
				warehouseForm.setLocaName(wareInfo.getLocaName());
				warehouseForm.setLocaStatus(wareInfo.getLocaStatus());
				warehouseForm.setPic1(wareInfo.getPic1());
				warehouseForm.setPic2(wareInfo.getPic2());
				
				pic1= wareInfo.getPic1();
				pic2= wareInfo.getPic2();				
			} else {
				forwardText = "success";
				request.setAttribute("alertMessage", "เลือกสถานที่เก็บสินค้า");
				
				warehouseForm.setWahoName(wahoName);
				
				List locationList = dbWahoLocation.GetLocationList(wahoCode, "", "");
				if (locationList.size() > 0 ) request.setAttribute("locationList", locationList);
			}
			
			request.setAttribute("pic1", pic1);
			request.setAttribute("pic2", pic2);
			
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
}