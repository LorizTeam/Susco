/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.inventory.action;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.inventory.data.DBWahoLocation;
import com.dtac.inventory.data.DBWarehouse;
import com.dtac.inventory.form.WarehouseForm;
/** 
 * MyEclipse Struts
 * Creation date: 26-04-2012
 */
public class WarehouseListAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();
		map.put("warehouseform.button.search", 	"search");
		map.put("warehouseform.button.adddata", "adddata");
		map.put("warehouseform.button.update",  "update");
		map.put("warehouseform.button.viewloca", "viewlocation");
		return map;
	}
	
	public ActionForward search(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //03-05-2012
		String forwardText = "success";
		String loginId 		= "";
		String appCode  	= "mm22";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "mant")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
       			
			WarehouseForm warehouseForm = (WarehouseForm) form;		
			String wahoCode = warehouseForm.getWahoCode();
			String wahoName  = new String(warehouseForm.getWahoName().getBytes("ISO8859_1"),"utf-8");
			String wahoStatus = warehouseForm.getWahoStatus();
			
						
			DBWarehouse dbWarehouse = new DBWarehouse();
//				dbWarehouse.GetWarehouseList(wahoCode, wahoName, wahoStatus);
			
			List warehouseList = dbWarehouse.GetWarehouseList(wahoCode, wahoName, wahoStatus);
			if (warehouseList.size() > 0) request.setAttribute("warehouseList", warehouseList);
			warehouseForm.initial();

		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}	
	public ActionForward adddata(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //03-05-2012
		String forwardText = "addnew";
		String loginId 		= "";
		String appCode  	= "mm22";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "mant")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
       			
			WarehouseForm warehouseForm = (WarehouseForm) form;		
			String wahoName  = new String(warehouseForm.getWahoName().getBytes("ISO8859_1"),"utf-8");
			
			warehouseForm.setWahoName(wahoName);
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}	
	public ActionForward update(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) 
	throws Exception {	//26-04-2012
		String forwardText 	= "update";
		String loginId 		= "";
		String appCode  	= "mm22";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "mant")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			
			WarehouseForm warehouseForm = (WarehouseForm) form;
			String wahoCode	= warehouseForm.getWahoCode();
			
			DBWarehouse dbWarehouse = new DBWarehouse();
			List warehouseList = dbWarehouse.GetWarehouseList(wahoCode, "", "");
			if 	(warehouseList.size() == 1) {
				WarehouseForm wahoInfo = (WarehouseForm) warehouseList.get(0);
				warehouseForm.setWahoName(wahoInfo.getWahoName());
				warehouseForm.setWahoStatus(wahoInfo.getWahoStatus());
				
			} else {
				forwardText = "success";
				request.setAttribute("alertMessage", "เลือกคลังสินค้า");
				
				warehouseList = dbWarehouse.GetWarehouseList("", "", "");
				if (warehouseList.size() > 0) request.setAttribute("warehouseList", warehouseList);

			}
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	
	public ActionForward viewlocation(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) 
	throws Exception {	//26-05-2012
		String forwardText 	= "view";
		String loginId 		= "";
		String appCode  	= "mm22";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "mant")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			
			WarehouseForm warehouseForm = (WarehouseForm) form;
			String wahoCode	= warehouseForm.getWahoCode();
			
			DBWarehouse dbWarehouse = new DBWarehouse();
			DBWahoLocation dbWahoLocation = new DBWahoLocation ();
			List warehouseList = dbWarehouse.GetWarehouseList(wahoCode, "", "");
			if 	(warehouseList.size() == 1) {
				WarehouseForm wahoInfo = (WarehouseForm) warehouseList.get(0);				
				warehouseForm.setWahoName(wahoInfo.getWahoName());
				warehouseForm.setWahoStatus(wahoInfo.getWahoStatus());
				
			} else {
				forwardText = "success";
				request.setAttribute("alertMessage", "เลือกคลังสินค้า");
				
				warehouseList = dbWarehouse.GetWarehouseList("", "", "");
				if (warehouseList.size() > 0) request.setAttribute("warehouseList", warehouseList);

			}				
			List locationList = dbWahoLocation.GetLocationList(wahoCode, "", "");
			if (locationList.size() > 0 ) request.setAttribute("locationList", locationList);
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
}