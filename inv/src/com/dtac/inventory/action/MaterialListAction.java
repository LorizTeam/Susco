/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.inventory.action;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.admin.data.DBMasterTable;
import com.dtac.inventory.data.DBMaterial;
import com.dtac.inventory.data.DBMaterialType;
import com.dtac.inventory.data.DBWarehouseAuth;
import com.dtac.inventory.form.MaterialForm;
import com.dtac.utils.DateUtil;
/** 
 * MyEclipse Struts
 * Creation date: 22-04-2012
 */
public class MaterialListAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();		
		map.put("materialform.button.adddata",	"adddata");
		map.put("materialform.button.search",	"search");
		map.put("materialform.button.view",		"view");
		return map;
	}

	public ActionForward search(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //13-07-2012
		String forwardText 	= "success";
		String loginId 		= "";
		String loginName ="";
		String appCode  	= "mm23";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			
			MaterialForm materialForm = (MaterialForm) form;			
			String matCode		= materialForm.getMatCode();
			String matName		= new String(materialForm.getMatName().getBytes("ISO8859_1"),"utf-8");
			String matSearchName= "";
			String matsupplName = new String(materialForm.getMatSupplName().getBytes("ISO8859_1"),"utf-8");
			String serial =  materialForm.getSerial();
			DBMaterial dbMaterial = new DBMaterial();
			String matTypeCode ="",matGrpCode ="", matColorCode ="", matStuffCode ="", refMatCode="", matStatus ="",
			pUnit ="", matBrandCode ="";
			List materialList = dbMaterial.GetMaterialList(matCode, matName, serial, matSearchName,
					matTypeCode, matGrpCode, matColorCode, matStuffCode, refMatCode, matStatus,
					pUnit, matBrandCode) ; 
			if (materialList.size() > 0) request.setAttribute("materialList", materialList);
			materialForm.setMatName(matName);
			materialForm.setMatSearchName(matSearchName);
			materialForm.setMatSupplName(matsupplName);
			materialForm.setMatGrpCode("");
			materialForm.setpUnit("EA");
			materialForm.setiUnit("EA");
			materialForm.setrUnit("EA");
			materialForm.setSerial("");
			materialForm.setReqOrdFlag("Y");
			
		// LIST STOCK
			DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();
	 
			List	warehouseAuth = dbWarehouseAuth.GetWarehouseAuth("", loginId, "AC");
				if (warehouseAuth.size() > 0) request.setAttribute("warehouseAuth", warehouseAuth);
		 
		//	
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	
	public ActionForward adddata(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //12-07-2012
		String forwardText  = "addnew";
		String loginId 		= "";
		String loginName ="";
		String appCode  	= "mm23";
		String msg  	= "";
		try {
			
			//check Login
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				loginName = (String) session.getAttribute("userName"); 
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			//check Login	
			MaterialForm materialForm = (MaterialForm) form;
			String docdate = materialForm.getDate();
			String typeperson = loginId+" "+ loginName;
			String matCode = materialForm.getMatCode();
			String matName		= new String(materialForm.getMatName().getBytes("ISO8859_1"),"utf-8");
			String serial = materialForm.getSerial();
			String matSearchName= "";
			String matsupplName = new String(materialForm.getMatSupplName().getBytes("ISO8859_1"),"utf-8");
			String matSupplCode = new String(materialForm.getMatSupplCode().getBytes("ISO8859_1"),"utf-8");
		//	String costPrice = new String(materialForm.getCostPrice().getBytes("ISO8859_1"),"utf-8");
			String normalPrice = new String(materialForm.getNormalPrice().getBytes("ISO8859_1"),"utf-8");
	        String wahoCode = materialForm.getRefMatCode();
			//String matStatus = new String(materialForm.getMatStatus().getBytes("ISO8859_1"),"utf-8");
			String matSendName ="0",pUnit="0", matTypeCode="0", matGrpCode="0", matRemark="0", 
			matBrandCode="0", matColorCode="0",rUnit="0", iUnit="0", matStuffCode="0", 
			refMatCode=materialForm.getRefMatCode(),costPrice="0"
			, qtyMaxStock="0", qtyMinStock="0",stock1="0",stock2="0",stock3="0",stock4="0",   sellPrice="0", 
			empPrice="0", vipPrice="0", specialPrice="0", rop="0",cvdocdate="";
			
			DateUtil dt  = new DateUtil();
			cvdocdate= dt.CnvToYYYYMMDD(docdate, '/');
			 
		  
		

		     if(wahoCode.equals("A1")){
		    	 stock1 = materialForm.getStock1();
		 	 }
		 	 if(wahoCode.equals("B1")){
		 		stock2 = materialForm.getStock1();
			 }
		 	 if(wahoCode.equals("C1")){
		 		   stock3 = materialForm.getStock1();
			 }
		 	 if(wahoCode.equals("D1")){
		 		 stock4 = materialForm.getStock1();
		 	  
			 }
		 	 
		 	 if(serial.equals("")){
		 		request.setAttribute("alertMessage","Serial not null");
		 	 }else{
			
			DBMaterial dbMaterial = new DBMaterial();
			matName = dbMaterial.getProductname(matCode);
			normalPrice= dbMaterial.getProductprice(matCode);
		msg=	dbMaterial.AddMaterial(matCode,loginId,cvdocdate,typeperson, serial, matSendName, matName, matSearchName, pUnit, rUnit, iUnit, matTypeCode, matGrpCode, matRemark, 
					matBrandCode, matSupplCode, matColorCode, matStuffCode, refMatCode, qtyMaxStock, qtyMinStock, stock1, stock2,stock3, stock4, normalPrice, 
					empPrice, vipPrice, costPrice, specialPrice, rop);
			
			List materialList = dbMaterial.GetMaterial(matCode); 
			if (materialList.size() > 0) request.setAttribute("materialList", materialList);
		
		 	 }	
			
			materialForm.setMatName(matName);
			materialForm.setNormalPrice(normalPrice);
			materialForm.setMatSearchName(matSearchName);
			materialForm.setMatSupplName(matsupplName);
			materialForm.setMatGrpCode("");
			materialForm.setpUnit("EA");
			materialForm.setiUnit("EA");
			materialForm.setrUnit("EA");
			materialForm.setSerial("");
			materialForm.setReqOrdFlag("Y");
			// list warehouse code
			DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();
			List warehouseAuth = dbWarehouseAuth.GetWarehouseAuth("", loginId, "AC");
			if (warehouseAuth.size() > 0) request.setAttribute("warehouseAuth", warehouseAuth);
			
		if(msg.equals("duplicate"))	request.setAttribute("alertMessage","Dupplicate Record");
			
			String textBoxId = "add";
			request.setAttribute("textBoxId", textBoxId);
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	
	//start view
	
	public ActionForward view(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
		throws Exception { //07-06-2012
			String forwardText  = "view";
			String loginId 		= "";
			String appCode  	= "mm23";
			try {
				HttpSession session = request.getSession();
				if (session.isNew()) {
					session.invalidate();
					request.setAttribute("alertMessage","Session Timeout. Login again.");
					return mapping.findForward("relogin");
				} else {
					loginId = (String) session.getAttribute("loginId");
					if (loginId == null) {
						request.setAttribute("alertMessage","Please Login.");
						return mapping.findForward("relogin");
					}
				}
				DBLogin dbLogin = new DBLogin();			
				if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
					request.setAttribute("alertMessage","You don't have authorize.");
					return mapping.findForward("alertmsg");
				}

				MaterialForm materialForm = (MaterialForm) form;
				String matCode		= materialForm.getMatCode();
				String serial       = materialForm.getSerial();
				String matName		= new String(materialForm.getMatName().getBytes("ISO8859_1"),"utf-8");
				String matSearchName= new String(materialForm.getMatSearchName().getBytes("ISO8859_1"),"utf-8");
				String matTypeCode	= materialForm.getMatTypeCode();
				String matGrpCode	= materialForm.getMatGrpCode(); if (matGrpCode == null) matGrpCode = "";
				String pic1			= "";
				String pic2			= "";
							
				DBMaterialType dbMaterialType = new DBMaterialType();
				List matTypeList = dbMaterialType.GetMaterialTypeList("");
				if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);

				DBMaterial dbMaterial = new DBMaterial();
				List materialList = dbMaterial.GetMaterial(matCode);
				if (materialList.size() == 1) {
					MaterialForm matInfo = (MaterialForm) materialList.get(0);
					matTypeCode = matInfo.getMatTypeCode();
					materialForm.setMatName(matInfo.getMatName());	
					materialForm.setMatSendName(matInfo.getMatSendName());
					materialForm.setMatSearchName(matInfo.getMatSearchName());
					materialForm.setpUnit(matInfo.getpUnit());
					materialForm.setrUnit(matInfo.getrUnit());
					materialForm.setiUnit(matInfo.getiUnit());
					materialForm.setMatTypeCode(matInfo.getMatTypeCode());
					materialForm.setMatGrpCode(matInfo.getMatGrpCode());
					materialForm.setMatRemark(matInfo.getMatRemark());
					materialForm.setMatBrandCode(matInfo.getMatBrandCode());
					materialForm.setMatSupplCode(matInfo.getMatSupplCode());
					materialForm.setMatSupplName(matInfo.getMatSupplName());
					materialForm.setMatColorCode(matInfo.getMatColorCode());
					materialForm.setMatStuffCode(matInfo.getMatStuffCode());
					materialForm.setRefMatCode(matInfo.getRefMatCode());
					materialForm.setReqOrdFlag(matInfo.getReqOrdFlag());
					materialForm.setQtyMaxStock(matInfo.getQtyMaxStock());
					materialForm.setQtyMinStock(matInfo.getQtyMinStock());
					materialForm.setMatStatus(matInfo.getMatStatus());
					materialForm.setPic1(matInfo.getPic1());
					materialForm.setPic2(matInfo.getPic2());
					pic1= matInfo.getPic1();
					pic2= matInfo.getPic2();
					materialForm.setNormalPrice(matInfo.getNormalPrice());
					materialForm.setEmpPrice(matInfo.getEmpPrice());
					materialForm.setCostPrice(matInfo.getCostPrice());
					materialForm.setSpecialPrice(matInfo.getSpecialPrice());
					materialForm.setVipPrice(matInfo.getVipPrice());
					materialForm.setStock1(matInfo.getStock1());
					materialForm.setStock2(matInfo.getStock2());
					materialForm.setRop(matInfo.getRop());
				} else {
					forwardText = "success";
					request.setAttribute("alertMessage", "Select Material.");
					
					materialList = dbMaterial.GetMaterialList(matCode, "", "","", matTypeCode, matGrpCode, "", "", "", "", "", "AC");
					if (materialList.size() > 0) request.setAttribute("materialList", materialList);
					
					materialForm.setMatName(matName);
					materialForm.setMatSearchName(matSearchName);
				}
				if (forwardText.equals("view")) {
					List matGrpList = dbMaterialType.GetMaterialGrpList(matTypeCode, "", "AC");
					if (matGrpList.size() > 0 && !matTypeCode.equals("")) request.setAttribute("matGrpList", matGrpList);
					
					DBMasterTable dbMasterTable = new DBMasterTable();
					List unitList = dbMasterTable.GetMasterTableDTList("unit", "", "", "AC");				
					if (unitList.size() > 0) request.setAttribute("unitList", unitList);
					
					List brandList = dbMasterTable.GetMasterTableDTList("bran", "", "", "AC");
					if (brandList.size() > 0) request.setAttribute("brandList", brandList);
					
					List colorList = dbMasterTable.GetMasterTableDTList("colo", "", "", "AC");
					if (colorList.size() > 0) request.setAttribute("colorList", colorList);
		
					List stuffList = dbMasterTable.GetMasterTableDTList("stuf", "", "", "AC");
					if (stuffList.size() > 0) request.setAttribute("stuffList", stuffList);
					
					List sizeList = dbMasterTable.GetMasterTableDTList("size", "", "", "AC");
					if (sizeList.size() > 0) request.setAttribute("sizeList", sizeList);

					request.setAttribute("pic1", pic1);
					request.setAttribute("pic2", pic2);
					request.setAttribute("matCode", matCode);
					
				}
			} catch (Exception e) {
				throw new Exception(e.getMessage());
			}
			return  mapping.findForward(forwardText);
		}

	
	//end view
	
	
	
	
}