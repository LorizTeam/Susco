/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.inventory.action;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.admin.data.DBMasterTable;
import com.dtac.admin.data.DBMonth;
import com.dtac.admin.data.DBYear;
import com.dtac.inventory.data.DBMatDocType;
import com.dtac.inventory.data.DBMaterial;
import com.dtac.inventory.data.DBMaterialTake;
import com.dtac.inventory.data.DBMaterialTrans;
import com.dtac.inventory.data.DBMaterialType;
import com.dtac.inventory.data.DBWahoLocation;
import com.dtac.inventory.data.DBWarehouse;
import com.dtac.inventory.data.DBWarehouseAuth;
import com.dtac.inventory.form.MaterialTakeForm;
import com.dtac.utils.DateUtil;
import com.dtac.utils.HistoryMaterial;
import com.dtac.utils.Stock;
/** 
 * MyEclipse Struts
 * Creation date: 12-04-2012
 */
public class MaterialChangeListAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();		
		map.put("materialtakeform.button.chg",	"chg");
		map.put("materialtakeform.button.getprod",	"getprod");
		map.put("materialtakeform.button.getprodchg",	"getprodchg");
		map.put("materialtakeform.button.print",	"print");

		
		return map;
	}
	
	///////
	public ActionForward chg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
		throws Exception { //12-05-2012
			String forwardText = "success";
			String loginId 		= "";
			String userName 	= "";
			String appCode  	= "mm42";
		 	String  doctypecode		=   "CHG";
	 
			try {
				HttpSession session = request.getSession();
				if (session.isNew()) {
					session.invalidate();
					request.setAttribute("alertMessage","Session Timeout. Login again.");
					return mapping.findForward("relogin");
				} else {
					loginId = (String) session.getAttribute("loginId");
					userName= (String) session.getAttribute("userName");
					if (loginId == null) {
						request.setAttribute("alertMessage","Please Login.");
						return mapping.findForward("relogin");
					}
				}
				DBLogin dbLogin = new DBLogin();			
				if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
					request.setAttribute("alertMessage","You don't have authorize.");
					return mapping.findForward("alertmsg");
				}
				
				MaterialTakeForm materialTakeForm = (MaterialTakeForm) form;					
				String docTypeCode	= materialTakeForm.getDocTypeCode();
				
				String docYear 		= materialTakeForm.getDocYear();
				String docMonth 	= materialTakeForm.getDocMonth();
				String matCode  = materialTakeForm.getMatCode();
				String matCodechg = materialTakeForm.getMatCodechg();
				String serial = materialTakeForm.getSerial();
				String serialchg = materialTakeForm.getSerialchg();
				String takequantity = materialTakeForm.getTakequantity();
				String quantitychg = 	materialTakeForm.getQuantitychg();
				String takeamount = materialTakeForm.getTakeamount();
				String amountchg = 	materialTakeForm.getAmountchg();
				String empCode 	= new String(materialTakeForm.getVendCode().getBytes("ISO8859_1"),"utf-8");
				String empName 	= new String(materialTakeForm.getVendName().getBytes("ISO8859_1"),"utf-8");
				String custCode = materialTakeForm.getCustCode();
				String custName  = new String(materialTakeForm.getCustName().getBytes("ISO8859_1"),"utf-8");
				String matName  = new String(materialTakeForm.getMatName().getBytes("ISO8859_1"),"utf-8");
				String matNamechg  = new String(materialTakeForm.getMatNamechg().getBytes("ISO8859_1"),"utf-8");
				String docbycode = loginId;
				String docbyname =userName;
				String remark =""; 
				String alertMessage	= "";
				
				
				if (docTypeCode.equals("")) {
					forwardText = "success";
					alertMessage = "ระบุประเภทการรับ";
					
					DBMaterialTake dbMaterialTake = new DBMaterialTake();
					List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(docTypeCode, docYear, docMonth, "", "AC", "", "", "", empCode, empName);
					if (matTakeHDList.size() > 0) request.setAttribute("matTakeHDList", matTakeHDList);
					
				} else {
					DateUtil dateUtil = new DateUtil();
					String docDate = dateUtil.CnvToDDMMYYYYThaiYear(dateUtil.CnvToYYYYMMDD(dateUtil.curDate(), '/'));

		 
					materialTakeForm.setDate(docDate);
					request.setAttribute("docTypeCode", docTypeCode);
					session.setAttribute("docTypeCode", docTypeCode);
				}
				
				DBMatDocType dbMatDocType = new DBMatDocType();
				List matDocTypeList = dbMatDocType.GetMatDocTypeList("issu", "", "AC");
				if (matDocTypeList.size() > 0) request.setAttribute("matDocTypeList", matDocTypeList);
				
				DBYear dbYear 	= new DBYear();
				List yearList	= dbYear.GetYearList("", "");
				if (yearList.size() > 0) request.setAttribute("yearList", yearList);
				
				DBMonth dbMonth = new DBMonth();
				List monthList  = dbMonth.GetMonthList();
				if (monthList.size() > 0) request.setAttribute("monthList", monthList);
							
				DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();
				List warehouseAuth = dbWarehouseAuth.GetWarehouseAuth("", loginId, "AC");
				if (warehouseAuth.size() > 0) request.setAttribute("warehouseAuth", warehouseAuth);
				else {
					forwardText = "success";
					alertMessage = "คุณไม่มีสิทธิ์ทำงานคลังสินค้า";
				}
				
				DBMasterTable dbMasterTable = new DBMasterTable();
				List orderTypeList = dbMasterTable.GetMasterTableDTList("odty", "", "", "AC");
				if (orderTypeList.size() > 0) request.setAttribute("orderTypeList", orderTypeList);
				
				String docNo = materialTakeForm.getDocNo();
				
		 
				
				String docDate 		= materialTakeForm.getDate();
				String wahoCode		= materialTakeForm.getWahoCode();
				DateUtil dt  = new DateUtil();
			String	datereturn= dt.CnvToYYYYMMDD(docDate, '/');
				
				DBWarehouse getwhnme = new DBWarehouse();
				
				String wahoName     = getwhnme.GetWarehouseName(wahoCode);
				
	 
				DBMaterialTake dbMaterialTake = new DBMaterialTake();	
		 
				
			//		docNo = dbMaterialTake.SelectDocno(docTypeCode, docYear);

					  
					
					List matTakeHDList = new ArrayList();
					matTakeHDList.add(new MaterialTakeForm("BW",docTypeCode, docYear, docMonth, docNo, docDate, "", "", docbycode, docbyname,
						"", "", "", "", "", "", "", "", "", "",
						"", "", "", wahoCode, wahoName, empCode, empName, remark, "AC"));
					
					materialTakeForm.setDocNo(docNo);
					materialTakeForm.setVendName(empName);
					materialTakeForm.setDocTypeCode(docTypeCode);
					materialTakeForm.setDocbycode(docbycode);
					materialTakeForm.setDocbyname(docbyname);
					materialTakeForm.setCustName(custName);
					materialTakeForm.setMatNamechg(matNamechg);
					materialTakeForm.setMatName(matName);
					
					DBMaterialTrans tbl = new DBMaterialTrans();
				//========================= Insert Table Header ===============================
					String status="CH";		 
					tbl.AddMaterialTranHD(status,doctypecode, docYear, docNo, docMonth, datereturn, "CH",custCode, custName, wahoCode,docbycode,docbyname);
									
				//=========================================================================	 
					
				// add array list detail	
					List<MaterialTakeForm> itemlist = new ArrayList<MaterialTakeForm>();
					List<MaterialTakeForm> itemlistnew = new ArrayList<MaterialTakeForm>();	
					 DBMaterial dbMaterial = new DBMaterial();	
		//Start  add a new record into list view JSP
					 
					 // new record insert to table detail						
					 tbl.AddMaterialTranDT(status,doctypecode,custCode,wahoCode, docYear, docNo,docMonth, datereturn, "1", serial, matCode, matName, takequantity, "0.0", takeamount, "AC");	
				    //=================== End Data Base Detail 			 
			   itemlistnew = dbMaterial.GetMaterialListSerial("CH",custCode,matCode, "", serial, "",
								"", "", "", "", "", "",	"", "",takequantity);		
				 itemlist.add(itemlistnew.get(0));
				 
		//Start  add a new record into list view JSP	
				 // new record insert to table detail						
				 tbl.AddMaterialTranDT("NW",doctypecode,custCode,wahoCode, docYear, docNo,docMonth, datereturn, "2", serialchg, matCodechg, matNamechg, quantitychg, "0.0", amountchg, "AC");	
			    //=================== End Data Base Detail 	
				 
			 itemlistnew = dbMaterial.GetMaterialListSerial("NW",custCode,matCodechg, "", serialchg, "",
							"", "", "", "", "", "",	"", "",quantitychg);		
			 itemlist.add(itemlistnew.get(0));
	
		//end	
					request.setAttribute("itemlist", itemlist);	
					
			
			
					
				
					
					request.setAttribute("matTakeHDList", matTakeHDList);
					
		 
				request.setAttribute("alertMessage", alertMessage);			 
			} catch (Exception e) {
				throw new Exception(e.getMessage());
			}
			return  mapping.findForward(forwardText);
		}
	
	//////
	public ActionForward getprod(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //12-05-2012
		String forwardText = "success";
		String loginId 		= "";
		String userName 	= "";
		String appCode  	= "mm42";
	 	String  doctypecode		=   "CHG";
 
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				userName= (String) session.getAttribute("userName");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			
			MaterialTakeForm materialTakeForm = (MaterialTakeForm) form;					
			String docTypeCode	= materialTakeForm.getDocTypeCode();
			
			String docYear 		= materialTakeForm.getDocYear();
			String docMonth 	= materialTakeForm.getDocMonth();
			String empCode 	= new String(materialTakeForm.getVendCode().getBytes("ISO8859_1"),"utf-8");
			String empName 	= new String(materialTakeForm.getVendName().getBytes("ISO8859_1"),"utf-8");
	 
			String docbycode = loginId;
			String docbyname =userName;
			String remark =""; 
			String alertMessage	= "";
			
			
			if (docTypeCode.equals("")) {
				forwardText = "success";
				alertMessage = "ระบุประเภทการรับ";
				
				DBMaterialTake dbMaterialTake = new DBMaterialTake();
				List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(docTypeCode, docYear, docMonth, "", "AC", "", "", "", empCode, empName);
				if (matTakeHDList.size() > 0) request.setAttribute("matTakeHDList", matTakeHDList);
				
			} else {
				DateUtil dateUtil = new DateUtil();
				String docDate = dateUtil.CnvToDDMMYYYYThaiYear(dateUtil.CnvToYYYYMMDD(dateUtil.curDate(), '/'));

	 
				materialTakeForm.setDate(docDate);
				request.setAttribute("docTypeCode", docTypeCode);
				session.setAttribute("docTypeCode", docTypeCode);
			}
			
			DBMatDocType dbMatDocType = new DBMatDocType();
			List matDocTypeList = dbMatDocType.GetMatDocTypeList("issu", "", "AC");
			if (matDocTypeList.size() > 0) request.setAttribute("matDocTypeList", matDocTypeList);
			
			DBYear dbYear 	= new DBYear();
			List yearList	= dbYear.GetYearList("", "");
			if (yearList.size() > 0) request.setAttribute("yearList", yearList);
			
			DBMonth dbMonth = new DBMonth();
			List monthList  = dbMonth.GetMonthList();
			if (monthList.size() > 0) request.setAttribute("monthList", monthList);
						
			DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();
			List warehouseAuth = dbWarehouseAuth.GetWarehouseAuth("", loginId, "AC");
			if (warehouseAuth.size() > 0) request.setAttribute("warehouseAuth", warehouseAuth);
			else {
				forwardText = "success";
				alertMessage = "คุณไม่มีสิทธิ์ทำงานคลังสินค้า";
			}
			
			DBMasterTable dbMasterTable = new DBMasterTable();
			List orderTypeList = dbMasterTable.GetMasterTableDTList("odty", "", "", "AC");
			if (orderTypeList.size() > 0) request.setAttribute("orderTypeList", orderTypeList);
			
			String docNo = materialTakeForm.getDocNo();			
			String docDate 		= materialTakeForm.getDate();
			String wahoCode		= materialTakeForm.getWahoCode();
			String serial  = materialTakeForm.getSerial();
			String serialchg  = materialTakeForm.getSerialchg();
			
			DBWarehouse getwhnme = new DBWarehouse();
			
			String wahoName     = getwhnme.GetWarehouseName(wahoCode);
			String custCode ="",custName="",matCode="",matName="",pricesale="";
			String  docTypeCodeold ="",docYearold ="",  docMonthold ="", datereturn="",  docNoold ="",  wahoCodeold ="";
			DBMaterialTake db = new DBMaterialTake();	
	 
			
			//	 get serial product detail
			List matHDList = new ArrayList();
			matHDList=	    db.GetMaterialSerialDTList(serial);
			if (matHDList.size() == 1) {
				request.setAttribute("matTakeHDList", matHDList);
				MaterialTakeForm matTakeInfo = (MaterialTakeForm) matHDList.get(0);	
				alertMessage = matTakeInfo.getAlertMessage();
				docTypeCodeold= matTakeInfo.getDocTypeCode();
				docYearold= matTakeInfo.getDocYear();
				docMonthold= matTakeInfo.getDocMonth();
				docNoold= matTakeInfo.getDocNo();
				wahoCodeold= matTakeInfo.getWahoCode();
				matCode = matTakeInfo.getMatCode();
				matName = matTakeInfo.getMatName();
				custCode = matTakeInfo.getCustCode();
				materialTakeForm.setCustCode(custCode);
				custName = matTakeInfo.getCustName();
				materialTakeForm.setCustName(custName);
				materialTakeForm.setMatCode( matCode);
				materialTakeForm.setMatName( matName);
				pricesale=matTakeInfo.getPricesale();
				materialTakeForm.setTakeamount(pricesale);
 
			} 
			String textBoxId = "";
			if(alertMessage!="Record Not Issue"){
				DateUtil dt  = new DateUtil();
				datereturn= dt.CnvToYYYYMMDD(docDate, '/');
      // receive change to stock change
			DBMaterial dbmat = new DBMaterial();
			dbmat.GetMaterialSerialreceiveList("E1", matCode,matName, docTypeCode,datereturn, docYear, docMonth, docNo, custCode, custName, serial, 1,pricesale);
	  		 textBoxId = "chg";
			}else{
				materialTakeForm.setSerial("");
				textBoxId = "start";
			}
				
				List matTakeHDList = new ArrayList();
				matTakeHDList.add(new MaterialTakeForm("CH",docTypeCode, docYear, docMonth, docNo, docDate, "", "", docbycode, docbyname,
					"", "", "", "", "", "", "", "", "", "",
					"", "", "", wahoCode, wahoName, empCode, empName, remark, "AC"));
				
				materialTakeForm.setDocNo(docNo);
				materialTakeForm.setVendName(empName);
				materialTakeForm.setDocTypeCode(docTypeCode);
				materialTakeForm.setDocbycode(docbycode);
				materialTakeForm.setDocbyname(docbyname);
				
				
			request.setAttribute("matTakeHDList", matTakeHDList);
				
	 
			request.setAttribute("alertMessage", alertMessage);		
			
			
			request.setAttribute("textBoxId", textBoxId);
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}

	public ActionForward getprodchg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
		throws Exception { //12-05-2012
			String forwardText = "success";
			String loginId 		= "";
			String userName 	= "";
			String appCode  	= "mm42";
		 	String  doctypecode		=   "CHG";
	 
			try {
				HttpSession session = request.getSession();
				if (session.isNew()) {
					session.invalidate();
					request.setAttribute("alertMessage","Session Timeout. Login again.");
					return mapping.findForward("relogin");
				} else {
					loginId = (String) session.getAttribute("loginId");
					userName= (String) session.getAttribute("userName");
					if (loginId == null) {
						request.setAttribute("alertMessage","Please Login.");
						return mapping.findForward("relogin");
					}
				}
				DBLogin dbLogin = new DBLogin();			
				if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
					request.setAttribute("alertMessage","You don't have authorize.");
					return mapping.findForward("alertmsg");
				}
				
				MaterialTakeForm materialTakeForm = (MaterialTakeForm) form;					
				String docTypeCode	= materialTakeForm.getDocTypeCode();
				
				String docYear 		= materialTakeForm.getDocYear();
				String docMonth 	= materialTakeForm.getDocMonth();
				String empCode 	= new String(materialTakeForm.getVendCode().getBytes("ISO8859_1"),"utf-8");
				String empName 	= new String(materialTakeForm.getVendName().getBytes("ISO8859_1"),"utf-8");
		 
				String docbycode = loginId;
				String docbyname =userName;
				String remark =""; 
				String alertMessage	= "";
				
				
				if (docTypeCode.equals("")) {
					forwardText = "success";
					alertMessage = "ระบุประเภทการรับ";
					
					DBMaterialTake dbMaterialTake = new DBMaterialTake();
					List matTakeHDList = dbMaterialTake.GetMaterialTakeHDList(docTypeCode, docYear, docMonth, "", "AC", "", "", "", empCode, empName);
					if (matTakeHDList.size() > 0) request.setAttribute("matTakeHDList", matTakeHDList);
					
				} else {
					DateUtil dateUtil = new DateUtil();
					String docDate = dateUtil.CnvToDDMMYYYYThaiYear(dateUtil.CnvToYYYYMMDD(dateUtil.curDate(), '/'));

		 
					materialTakeForm.setDate(docDate);
					request.setAttribute("docTypeCode", docTypeCode);
					session.setAttribute("docTypeCode", docTypeCode);
				}
				
				DBMatDocType dbMatDocType = new DBMatDocType();
				List matDocTypeList = dbMatDocType.GetMatDocTypeList("issu", "", "AC");
				if (matDocTypeList.size() > 0) request.setAttribute("matDocTypeList", matDocTypeList);
				
				DBYear dbYear 	= new DBYear();
				List yearList	= dbYear.GetYearList("", "");
				if (yearList.size() > 0) request.setAttribute("yearList", yearList);
				
				DBMonth dbMonth = new DBMonth();
				List monthList  = dbMonth.GetMonthList();
				if (monthList.size() > 0) request.setAttribute("monthList", monthList);
							
				DBWarehouseAuth dbWarehouseAuth = new DBWarehouseAuth();
				List warehouseAuth = dbWarehouseAuth.GetWarehouseAuth("", loginId, "AC");
				if (warehouseAuth.size() > 0) request.setAttribute("warehouseAuth", warehouseAuth);
				else {
					forwardText = "success";
					alertMessage = "คุณไม่มีสิทธิ์ทำงานคลังสินค้า";
				}
				
				DBMasterTable dbMasterTable = new DBMasterTable();
				List orderTypeList = dbMasterTable.GetMasterTableDTList("odty", "", "", "AC");
				if (orderTypeList.size() > 0) request.setAttribute("orderTypeList", orderTypeList);
				
				String docNo = materialTakeForm.getDocNo();			
				String docDate 		= materialTakeForm.getDate();
				String wahoCode		= materialTakeForm.getWahoCode();
			//	String serial  = materialTakeForm.getSerial();
				String serialchg  = materialTakeForm.getSerialchg();
				String custCode  = materialTakeForm.getCustCode();
				String custName  = new String(materialTakeForm.getCustName().getBytes("ISO8859_1"),"utf-8");
				
				DBWarehouse getwhnme = new DBWarehouse();
				
				String wahoName     = getwhnme.GetWarehouseName(wahoCode);
				
	 
				DBMaterial db = new DBMaterial();	
		 
				
				//	 get serial product detail
				List matHDList = new ArrayList();
				int qty = 1;
				matHDList= db.GetMaterialSerialissueList(docTypeCode, docYear, docMonth, docNo, custCode,custName,serialchg,qty);
				if (matHDList.size() == 1) {
					request.setAttribute("matTakeHDList", matHDList);
					MaterialTakeForm matTakeInfo = (MaterialTakeForm) matHDList.get(0);				
				 
					materialTakeForm.setMatCodechg(matTakeInfo.getMatCode());
					materialTakeForm.setMatNamechg(matTakeInfo.getMatName());
					materialTakeForm.setMatName(matTakeInfo.getMatName());
				
					materialTakeForm.setAmountchg(matTakeInfo.getPricesale());
	 
				} 

					  
					
					List matTakeHDList = new ArrayList();
					matTakeHDList.add(new MaterialTakeForm("BW",docTypeCode, docYear, docMonth, docNo, docDate, "", "", docbycode, docbyname,
						"", "", "", "", "", "", "", "", "", "",
						"", "", "", wahoCode, wahoName, empCode, empName, remark, "AC"));
					
					materialTakeForm.setDocNo(docNo);
					materialTakeForm.setVendName(empName);
					materialTakeForm.setCustName(custName);
					materialTakeForm.setDocTypeCode(docTypeCode);
					materialTakeForm.setDocbycode(docbycode);
					materialTakeForm.setDocbyname(docbyname);
					
					
				request.setAttribute("matTakeHDList", matTakeHDList);
					
		 
				request.setAttribute("alertMessage", alertMessage);		
				
				String textBoxId = "end";
				request.setAttribute("textBoxId", textBoxId);
				
			} catch (Exception e) {
				throw new Exception(e.getMessage());
			}
			return  mapping.findForward(forwardText);
		}

	public ActionForward print(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
		throws Exception { //23-10-2012
			String forwardText 	= "print";
			String loginId 		= "";
			String appCode  	= "mm42";
			try {
				HttpSession session = request.getSession();
				if (session.isNew()) {
					session.invalidate();
					request.setAttribute("alertMessage","Session Timeout. Login again.");
					return mapping.findForward("relogin");
				} else {
					loginId = (String) session.getAttribute("loginId");
					if (loginId == null) {
						request.setAttribute("alertMessage","Please Login.");
						return mapping.findForward("relogin");
					}
				}
				DBLogin dbLogin = new DBLogin();			
				if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
					request.setAttribute("alertMessage","You don't have authorize.");
					return mapping.findForward("alertmsg");
				}

				MaterialTakeForm materialTakeForm = (MaterialTakeForm) form;
				String doctypecode	= materialTakeForm.getDocTypeCode();
				String docyear		= materialTakeForm.getDocYear();
				String docno		= materialTakeForm.getDocNo();
				String date			= materialTakeForm.getLotno();
				
				DateUtil dateUtil = new DateUtil();
				request.setAttribute("docTypeCode", doctypecode); 
				request.setAttribute("docYear", docyear);
				request.setAttribute("docNo", docno);
				request.setAttribute("date",dateUtil.CnvToYYYYMMDDEngYear(date, '-'));
				
			} catch (Exception e) {
				throw new Exception(e.getMessage());
			}
			return  mapping.findForward(forwardText);
		}
}