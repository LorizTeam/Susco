/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.inventory.action;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.inventory.data.DBChkStock;
import com.dtac.inventory.data.DBMaterialType;
import com.dtac.inventory.data.DBWahoLocation;
import com.dtac.inventory.form.ChkStockForm;
/** 
 * MyEclipse Struts
 * Creation date: 22-04-2012
 */
public class ChkStockMatSelectAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();		
		map.put("checkstockform.button.search",	"search");
		map.put("checkstockform.button.add",	"add");
		map.put("checkstockform.button.remove",	"remove");
		map.put("checkstockform.button.update",	"update");
		return map;
	}

	public ActionForward search(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //18-10-2012
		String forwardText 	= "success";
		String loginId 		= "";
		String appCode  	= "mm46";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"disp")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			
			ChkStockForm chkStockForm = (ChkStockForm) form;
			String docYear		= chkStockForm.getDocYear();
			String docMonth		= chkStockForm.getDocMonth();
			String wahoCode		= chkStockForm.getWahoCode();
			String wahoName		= new String(chkStockForm.getWahoName().getBytes("ISO8859_1"),"utf-8");
			String lotNo		= chkStockForm.getLotNo();
			String locaCode		= chkStockForm.getLocaCode();
			String matCode		= chkStockForm.getMatCode();
			String matName		= new String(chkStockForm.getMatName().getBytes("ISO8859_1"),"utf-8");
			String matTypeCode	= chkStockForm.getMatTypeCode();
			String matGrpCode	= chkStockForm.getMatGrpCode(); if (matGrpCode == null) matGrpCode = "";
			String alertMessage	= "";
					
			DBWahoLocation dbWahoLocation = new DBWahoLocation();		 	
			List locaList = dbWahoLocation.GetLocationList(wahoCode, "", "AC");
			if (locaList.size() > 0) request.setAttribute("locaList", locaList);
			
			DBMaterialType dbMaterialType = new DBMaterialType();
			List matTypeList = dbMaterialType.GetMaterialTypeList("");
			if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);
						
			List matGrpList = dbMaterialType.GetMaterialGrpList(matTypeCode, matGrpCode, "AC");
			if (matGrpList.size() > 0 && !matTypeCode.equals("")) request.setAttribute("matGrpList", matGrpList);

			DBChkStock dbChkStock = new DBChkStock();
			List matWahoList = dbChkStock.GetMatWahoList(docYear, docMonth, wahoCode, locaCode, lotNo, matCode, matName, matTypeCode, matGrpCode);
			if (matWahoList.size() > 0) request.setAttribute("matWahoList", matWahoList);
			
			List chkStockList = dbChkStock.GetChkStockList(docYear, docMonth, wahoCode, locaCode, lotNo, matCode, matName, matTypeCode, matGrpCode);
			if (chkStockList.size() > 0) request.setAttribute("chkStockList", chkStockList);
			
			chkStockForm.setWahoName(wahoName);

			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward add(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //18-10-2012
		String forwardText 	= "success";
		String loginId 		= "";
		String appCode  	= "mm46";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"mant")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			
			ChkStockForm chkStockForm = (ChkStockForm) form;
			String docYear		= chkStockForm.getDocYear();
			String docMonth		= chkStockForm.getDocMonth();
			String wahoCode		= chkStockForm.getWahoCode();
			String wahoName		= new String(chkStockForm.getWahoName().getBytes("ISO8859_1"),"utf-8");
			String lotNo		= chkStockForm.getLotNo();
			String locaCode		= chkStockForm.getLocaCode();
			String matCode		= chkStockForm.getMatCode();
			String matName		= new String(chkStockForm.getMatName().getBytes("ISO8859_1"),"utf-8");
			String matTypeCode	= chkStockForm.getMatTypeCode();
			String matGrpCode	= chkStockForm.getMatGrpCode(); if (matGrpCode == null) matGrpCode = "";
			String alertMessage	= "";
			
			DBChkStock dbChkStock = new DBChkStock();
			if (request.getParameterValues("wahoSelectList") != null){
				String select[] = request.getParameterValues("wahoSelectList");
				if (select.length > 0) {
					String tLocaCode = "";
					String tLotNo 	= "";
					String tMatCode = "";
					for (int i=0;i<select.length;i++){
						tLocaCode 	= select[i].substring(0,2);
						tLotNo		= select[i].substring(2,12);
						tMatCode	= select[i].substring(12);
						if (dbChkStock.CheckExistRecord(docYear, docMonth, wahoCode, tLocaCode, tLotNo, tMatCode)) {
							dbChkStock.UpdateChkStockStatus(docYear, docMonth, wahoCode, tLocaCode, tMatCode, tLotNo, "AC");
						} else {
							dbChkStock.AddChkStock(docYear, docMonth, wahoCode, tLocaCode, tMatCode, tLotNo, "0", "0");
						}
					}
				}
			}			
			DBWahoLocation dbWahoLocation = new DBWahoLocation();		 	
			List locaList = dbWahoLocation.GetLocationList(wahoCode, "", "AC");
			if (locaList.size() > 0) request.setAttribute("locaList", locaList);
			
			DBMaterialType dbMaterialType = new DBMaterialType();
			List matTypeList = dbMaterialType.GetMaterialTypeList("");
			if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);
						
			List matGrpList = dbMaterialType.GetMaterialGrpList(matTypeCode, matGrpCode, "AC");
			if (matGrpList.size() > 0 && !matTypeCode.equals("")) request.setAttribute("matGrpList", matGrpList);
							
			List matWahoList = dbChkStock.GetMatWahoList(docYear, docMonth, wahoCode, locaCode, lotNo, matCode, matName, matTypeCode, matGrpCode);
			if (matWahoList.size() > 0) request.setAttribute("matWahoList", matWahoList);
							
			List chkStockList = dbChkStock.GetChkStockList(docYear, docMonth, wahoCode, locaCode, lotNo, matCode, matName, matTypeCode, matGrpCode);
			if (chkStockList.size() > 0) request.setAttribute("chkStockList", chkStockList);
			
			chkStockForm.setWahoName(wahoName);
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward remove(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //18-10-2012
		String forwardText 	= "success";
		String loginId 		= "";
		String appCode  	= "mm46";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"mant")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			
			ChkStockForm chkStockForm = (ChkStockForm) form;
			String docYear		= chkStockForm.getDocYear();
			String docMonth		= chkStockForm.getDocMonth();
			String wahoCode		= chkStockForm.getWahoCode();
			String wahoName		= new String(chkStockForm.getWahoName().getBytes("ISO8859_1"),"utf-8");
			String lotNo		= chkStockForm.getLotNo();
			String locaCode		= chkStockForm.getLocaCode();
			String matCode		= chkStockForm.getMatCode();
			String matName		= new String(chkStockForm.getMatName().getBytes("ISO8859_1"),"utf-8");
			String matTypeCode	= chkStockForm.getMatTypeCode();
			String matGrpCode	= chkStockForm.getMatGrpCode(); if (matGrpCode == null) matGrpCode = "";
			String alertMessage	= "";
			
			DBChkStock dbChkStock = new DBChkStock();
			
			if (request.getParameterValues("chkStockSelectList") != null){
				String select[] = request.getParameterValues("chkStockSelectList");
				if (select.length > 0) {
					String tLocaCode = "";
					String tLotNo 	= "";
					String tMatCode = "";
					for (int i=0;i<select.length;i++){
						tLocaCode 	= select[i].substring(0,2);
						tLotNo		= select[i].substring(2,12);
						tMatCode	= select[i].substring(12);
						
						dbChkStock.UpdateChkStockStatus(docYear, docMonth, wahoCode, tLocaCode, tMatCode, tLotNo, "CA");
					}
				}
			}		
			DBWahoLocation dbWahoLocation = new DBWahoLocation();		 	
			List locaList = dbWahoLocation.GetLocationList(wahoCode, "", "AC");
			if (locaList.size() > 0) request.setAttribute("locaList", locaList);
			
			DBMaterialType dbMaterialType = new DBMaterialType();
			List matTypeList = dbMaterialType.GetMaterialTypeList("");
			if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);
						
			List matGrpList = dbMaterialType.GetMaterialGrpList(matTypeCode, matGrpCode, "AC");
			if (matGrpList.size() > 0 && !matTypeCode.equals("")) request.setAttribute("matGrpList", matGrpList);
							
			List matWahoList = dbChkStock.GetMatWahoList(docYear, docMonth, wahoCode, locaCode, lotNo, matCode, matName, matTypeCode, matGrpCode);
			if (matWahoList.size() > 0) request.setAttribute("matWahoList", matWahoList);
							
			List chkStockList = dbChkStock.GetChkStockList(docYear, docMonth, wahoCode, locaCode, lotNo, matCode, matName, matTypeCode, matGrpCode);
			if (chkStockList.size() > 0) request.setAttribute("chkStockList", chkStockList);
			
			chkStockForm.setWahoName(wahoName);
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
	public ActionForward update(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //19-10-2012
		String forwardText 	= "success";
		String loginId 		= "";
		String appCode  	= "mm46";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage","Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage","Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();			
			if (!dbLogin.CheckAppAuth(loginId,appCode,"mant")) {
				request.setAttribute("alertMessage","You don't have authorize.");
				return mapping.findForward("alertmsg");
			}
			
			ChkStockForm chkStockForm = (ChkStockForm) form;
			String docYear		= chkStockForm.getDocYear();
			String docMonth		= chkStockForm.getDocMonth();
			String wahoCode		= chkStockForm.getWahoCode();
			String wahoName		= new String(chkStockForm.getWahoName().getBytes("ISO8859_1"),"utf-8");
			String lotNo		= chkStockForm.getLotNo();
			String locaCode		= chkStockForm.getLocaCode();
			String matCode		= chkStockForm.getMatCode();
			String matName		= new String(chkStockForm.getMatName().getBytes("ISO8859_1"),"utf-8");
			String matTypeCode	= chkStockForm.getMatTypeCode();
			String matGrpCode	= chkStockForm.getMatGrpCode(); if (matGrpCode == null) matGrpCode = "";
			String chkStockQty 	= "";
			String alertMessage	= "";
			
			String chkStockQtyList[] = null;
			int index = 0;
			
			DBChkStock dbChkStock = new DBChkStock();
			
			if (request.getParameterValues("chkStockQtyList") != null){
				chkStockQtyList = request.getParameterValues("chkStockQtyList");
				if (chkStockQtyList.length > 0){
					for (int i=0;i<chkStockQtyList.length;i++){
						chkStockQty = chkStockQtyList[i];
						
						
						List chkStock = dbChkStock.GetChkStockList(docYear, docMonth, wahoCode, "", "", "", "", "", "");
						if (chkStock.size() > 0){
							ChkStockForm chkStockInfo = (ChkStockForm) chkStock.get(i);
							
							locaCode 	= chkStockInfo.getLocaCode();
							lotNo		= chkStockInfo.getLotNo();
							matCode		= chkStockInfo.getMatCode();
							if (!chkStockQty.equals("")){
								dbChkStock.UpdateChkStockQty(docYear, docMonth, wahoCode, locaCode, matCode, lotNo, chkStockQty);
							}
						}
					}
				}
			}
			
			DBWahoLocation dbWahoLocation = new DBWahoLocation();		 	
			List locaList = dbWahoLocation.GetLocationList(wahoCode, "", "AC");
			if (locaList.size() > 0) request.setAttribute("locaList", locaList);
			
			DBMaterialType dbMaterialType = new DBMaterialType();
			List matTypeList = dbMaterialType.GetMaterialTypeList("");
			if (matTypeList.size() > 0) request.setAttribute("matTypeList", matTypeList);
						
			List matGrpList = dbMaterialType.GetMaterialGrpList(matTypeCode, matGrpCode, "AC");
			if (matGrpList.size() > 0 && !matTypeCode.equals("")) request.setAttribute("matGrpList", matGrpList);
							
			List matWahoList = dbChkStock.GetMatWahoList(docYear, docMonth, wahoCode, locaCode, lotNo, matCode, matName, matTypeCode, matGrpCode);
			if (matWahoList.size() > 0) request.setAttribute("matWahoList", matWahoList);
							
			List chkStockList = dbChkStock.GetChkStockList(docYear, docMonth, wahoCode, locaCode, lotNo, matCode, matName, matTypeCode, matGrpCode);
			if (chkStockList.size() > 0) request.setAttribute("chkStockList", chkStockList);
			
			chkStockForm.setWahoName(wahoName);
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return  mapping.findForward(forwardText);
	}
}