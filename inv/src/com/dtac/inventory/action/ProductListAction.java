/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.dtac.inventory.action;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.dtac.admin.data.DBLogin;
import com.dtac.admin.data.DBMasterTable;
import com.dtac.center.data.DBAddress;
import com.dtac.inventory.data.DBCustomer;
import com.dtac.inventory.data.DBProduct;
import com.dtac.inventory.data.DBVender;
import com.dtac.inventory.form.CustomerForm;
import com.dtac.inventory.form.ProductForm;
import com.dtac.inventory.form.VenderForm;
/**
 * MyEclipse Struts 
 * Creation date: 12-04-2012
 */
public class ProductListAction extends LookupDispatchAction {

	protected Map getKeyMethodMap() {
		Map map = new HashMap();
		map.put("productform.button.adddata", "adddata");
		map.put("productform.button.search", "search");
	 
		return map;
	}

	public ActionForward search(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { //12-07-2012
		String forwardText 	= "success";
		String loginId 		= "";
		String appCode 		= "mm07";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage", "Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage", "Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();
			if (!dbLogin.CheckAppAuth(loginId, appCode, "disp")) {
				request.setAttribute("alertMessage", "You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

	 

			ProductForm productForm = (ProductForm) form;
			String productCode 	= new String(productForm.getProductCode().getBytes("ISO8859_1"), "utf-8");
			String productName 	= new String(productForm.getProductName().getBytes("ISO8859_1"), "utf-8");
			String price = productForm.getPrice();
			
			 

			DBProduct dbVender = new DBProduct();
			List productList = dbVender.GetProductMasterList(productCode, productName, "", "");
			if (productList.size() > 0) request.setAttribute("productList", productList);		 
			
			productForm.setProductCode(productCode);
			productForm.setProductName(productName);
			productForm.setStatus("AC");
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return mapping.findForward(forwardText);
	}
 
	
	public ActionForward adddata(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)
	throws Exception { // 12-07-2012
		String forwardText 	= "addnew";
		String loginId 		= "";
		String appCode 		= "mm07";
		try {
			HttpSession session = request.getSession();
			if (session.isNew()) {
				session.invalidate();
				request.setAttribute("alertMessage", "Session Timeout. Login again.");
				return mapping.findForward("relogin");
			} else {
				loginId = (String) session.getAttribute("loginId");
				if (loginId == null) {
					request.setAttribute("alertMessage", "Please Login.");
					return mapping.findForward("relogin");
				}
			}
			DBLogin dbLogin = new DBLogin();
			if (!dbLogin.CheckAppAuth(loginId, appCode, "mant")) {
				request.setAttribute("alertMessage", "You don't have authorize.");
				return mapping.findForward("alertmsg");
			}

			ProductForm productForm = (ProductForm) form;
			String productCode 	= new String(productForm.getProductCode().getBytes("ISO8859_1"), "utf-8");
			String productName 	= new String(productForm.getProductName().getBytes("ISO8859_1"), "utf-8");
			String price = productForm.getPrice();
			
			 

			DBProduct db = new DBProduct();
			   
			   db.AddProductMaster(productCode, productName, price);
			List productList = db.GetProductMasterList(productCode, productName, "", "");
			if (productList.size() > 0) request.setAttribute("productList", productList);		 
			
			productForm.setProductCode(productCode);
			productForm.setProductName(productName);
			productForm.setStatus("AC");
			
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return mapping.findForward(forwardText);
	}
}